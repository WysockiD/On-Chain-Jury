"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeBytecode = exports.compareBytecode = exports.extractMatchingContractInformation = exports.lookupMatchingBytecode = exports.Bytecode = void 0;
const contract_names_1 = require("hardhat/utils/contract-names");
const metadata_1 = require("./metadata");
class Bytecode {
    constructor(bytecode) {
        this._bytecode = bytecode;
        const { solcVersion, metadataSectionSizeInBytes } = metadata_1.inferSolcVersion(Buffer.from(bytecode, "hex"));
        this._version = solcVersion;
        this._executableSection = {
            start: 0,
            length: bytecode.length - metadataSectionSizeInBytes * 2,
        };
        this._metadataSection = {
            start: this._executableSection.length,
            length: metadataSectionSizeInBytes * 2,
        };
    }
    getInferredSolcVersion() {
        return this._version;
    }
    getExecutableSection() {
        const { start, length } = this._executableSection;
        return this._bytecode.slice(start, length);
    }
    hasMetadata() {
        return this._metadataSection.length > 0;
    }
}
exports.Bytecode = Bytecode;
async function lookupMatchingBytecode(artifacts, matchingCompilerVersions, deployedBytecode) {
    const contractMatches = [];
    const fqNames = await artifacts.getAllFullyQualifiedNames();
    for (const fqName of fqNames) {
        const buildInfo = await artifacts.getBuildInfo(fqName);
        if (buildInfo === undefined) {
            continue;
        }
        if (!matchingCompilerVersions.includes(buildInfo.solcVersion)) {
            continue;
        }
        const { sourceName, contractName } = contract_names_1.parseFullyQualifiedName(fqName);
        const contractInformation = await extractMatchingContractInformation(sourceName, contractName, buildInfo, deployedBytecode);
        if (contractInformation !== null) {
            contractMatches.push(contractInformation);
        }
    }
    return contractMatches;
}
exports.lookupMatchingBytecode = lookupMatchingBytecode;
async function extractMatchingContractInformation(sourceName, contractName, buildInfo, deployedBytecode) {
    const contract = buildInfo.output.contracts[sourceName][contractName];
    // Normalize deployed bytecode according to this contract.
    const { deployedBytecode: runtimeBytecodeSymbols } = contract.evm;
    const analyzedBytecode = await compareBytecode(deployedBytecode, runtimeBytecodeSymbols);
    if (analyzedBytecode !== null) {
        return Object.assign(Object.assign({}, analyzedBytecode), { compilerInput: buildInfo.input, compilerOutput: buildInfo.output, solcVersion: buildInfo.solcVersion, sourceName,
            contractName,
            contract });
    }
    return null;
}
exports.extractMatchingContractInformation = extractMatchingContractInformation;
async function compareBytecode(deployedBytecode, runtimeBytecodeSymbols) {
    // We will ignore metadata information when comparing. Etherscan seems to do the same.
    const deployedExecutableSection = deployedBytecode.getExecutableSection();
    const runtimeBytecodeExecutableSectionLength = metadata_1.measureExecutableSectionLength(runtimeBytecodeSymbols.object);
    if (deployedExecutableSection.length !== runtimeBytecodeExecutableSectionLength) {
        return null;
    }
    // Normalize deployed bytecode according to this contract.
    const { immutableValues, libraryLinks, normalizedBytecode, } = await normalizeBytecode(deployedExecutableSection, runtimeBytecodeSymbols);
    // Library hash placeholders are embedded into the bytes where the library addresses are linked.
    // We need to zero them out to compare them.
    const { normalizedBytecode: referenceBytecode } = await normalizeBytecode(runtimeBytecodeSymbols.object, runtimeBytecodeSymbols);
    if (normalizedBytecode.slice(0, deployedExecutableSection.length) ===
        referenceBytecode.slice(0, deployedExecutableSection.length)) {
        // The bytecode matches
        return {
            immutableValues,
            libraryLinks,
            normalizedBytecode,
        };
    }
    return null;
}
exports.compareBytecode = compareBytecode;
async function normalizeBytecode(bytecode, symbols) {
    const nestedSliceReferences = [];
    const libraryLinks = {};
    for (const [sourceName, libraries] of Object.entries(symbols.linkReferences)) {
        for (const [libraryName, linkReferences] of Object.entries(libraries)) {
            // Is this even a possibility?
            if (linkReferences.length === 0) {
                continue;
            }
            const { start, length } = linkReferences[0];
            if (libraryLinks[sourceName] === undefined) {
                libraryLinks[sourceName] = {};
            }
            // We have the bytecode encoded as a hex string
            libraryLinks[sourceName][libraryName] = `0x${bytecode.slice(start * 2, (start + length) * 2)}`;
            nestedSliceReferences.push(linkReferences);
        }
    }
    const immutableValues = {};
    if (symbols.immutableReferences !== undefined &&
        symbols.immutableReferences !== null) {
        for (const [key, immutableReferences] of Object.entries(symbols.immutableReferences)) {
            // Is this even a possibility?
            if (immutableReferences.length === 0) {
                continue;
            }
            const { start, length } = immutableReferences[0];
            immutableValues[key] = bytecode.slice(start * 2, (start + length) * 2);
            nestedSliceReferences.push(immutableReferences);
        }
    }
    // To normalize a library object we need to take into account its call protection mechanism.
    // See https://solidity.readthedocs.io/en/latest/contracts.html#call-protection-for-libraries
    const addressSize = 20;
    const push20OpcodeHex = "73";
    const pushPlaceholder = push20OpcodeHex + "0".repeat(addressSize * 2);
    if (symbols.object.startsWith(pushPlaceholder) &&
        bytecode.startsWith(push20OpcodeHex)) {
        nestedSliceReferences.push([{ start: 1, length: addressSize }]);
    }
    const sliceReferences = flattenSlices(nestedSliceReferences);
    const normalizedBytecode = zeroOutSlices(bytecode, sliceReferences);
    return { libraryLinks, immutableValues, normalizedBytecode };
}
exports.normalizeBytecode = normalizeBytecode;
function flattenSlices(slices) {
    return [].concat(...slices);
}
function zeroOutSlices(code, slices) {
    for (const { start, length } of slices) {
        code = [
            code.slice(0, start * 2),
            "0".repeat(length * 2),
            code.slice((start + length) * 2),
        ].join("");
    }
    return code;
}
//# sourceMappingURL=bytecode.js.map