{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport usePoller from \"./Poller\";\nimport useOnBlock from \"./OnBlock\";\nimport { Provider } from \"@ethersproject/providers\";\nconst DEBUG = false;\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n  - Pass an args array if the function requires\n  - Pass pollTime - if no pollTime is specified, the function will update on every new block\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 0;\n\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n\n  const updateValue = async () => {\n    try {\n      let newValue;\n      if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n\n      if (args && args.length > 0) {\n        newValue = await contracts[contractName][functionName](...args);\n        if (DEBUG) console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n      } else {\n        newValue = await contracts[contractName][functionName]();\n      }\n\n      if (formatter && typeof formatter === \"function\") {\n        newValue = formatter(newValue);\n      } // console.log(\"GOT VALUE\",newValue)\n\n\n      if (newValue !== value) {\n        setValue(newValue);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }; // Only pass a provider to watch on a block if we have a contract and no PollTime\n\n\n  useOnBlock(contracts && contracts[contractName] && adjustPollTime === 0 && contracts[contractName].provider, () => {\n    if (contracts && contracts[contractName] && adjustPollTime === 0) {\n      updateValue();\n    }\n  }); // Use a poller if a pollTime is provided\n\n  usePoller(async () => {\n    if (contracts && contracts[contractName] && adjustPollTime > 0) {\n      if (DEBUG) console.log('polling!', contractName, functionName);\n      updateValue();\n    }\n  }, adjustPollTime, contracts && contracts[contractName]);\n  return value;\n}","map":{"version":3,"sources":["/home/dylan/Desktop/JuryDapp/packages/react-app/src/hooks/ContractReader.js"],"names":["useState","useEffect","usePoller","useOnBlock","Provider","DEBUG","useContractReader","contracts","contractName","functionName","args","pollTime","formatter","onChange","adjustPollTime","value","setValue","setTimeout","bind","updateValue","newValue","console","log","length","e","provider"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport usePoller from \"./Poller\";\nimport useOnBlock from \"./OnBlock\";\nimport { Provider } from \"@ethersproject/providers\";\n\nconst DEBUG = false;\n\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n  - Pass an args array if the function requires\n  - Pass pollTime - if no pollTime is specified, the function will update on every new block\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 0;\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n\n  const updateValue = async () => {\n    try {\n      let newValue;\n      if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n      if (args && args.length > 0) {\n        newValue = await contracts[contractName][functionName](...args);\n        if (DEBUG)\n          console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n      } else {\n        newValue = await contracts[contractName][functionName]();\n      }\n      if (formatter && typeof formatter === \"function\") {\n        newValue = formatter(newValue);\n      }\n      // console.log(\"GOT VALUE\",newValue)\n      if (newValue !== value) {\n        setValue(newValue);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n// Only pass a provider to watch on a block if we have a contract and no PollTime\n  useOnBlock(\n    (contracts && contracts[contractName] && adjustPollTime === 0)&&contracts[contractName].provider,\n    () => {\n    if (contracts && contracts[contractName] && adjustPollTime === 0) {\n      updateValue()\n  }\n  })\n\n// Use a poller if a pollTime is provided\nusePoller(async () => {\n  if (contracts && contracts[contractName] && adjustPollTime > 0) {\n    if (DEBUG) console.log('polling!', contractName, functionName)\n    updateValue()\n  }\n}, adjustPollTime, contracts && contracts[contractName])\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}