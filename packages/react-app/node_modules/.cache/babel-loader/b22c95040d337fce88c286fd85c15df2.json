{"ast":null,"code":"\"use strict\";\n\nvar _codemirror = _interopRequireDefault(require(\"codemirror\"));\n\nvar _getTypeInfo = _interopRequireDefault(require(\"./utils/getTypeInfo\"));\n\nvar _SchemaReference = require(\"./utils/SchemaReference\");\n\nrequire(\"./utils/jump-addon\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n *  Copyright (c) 2020 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n *\n */\n\n/**\n * Registers GraphQL \"jump\" links for CodeMirror.\n *\n * When command-hovering over a token, this converts it to a link, which when\n * pressed will call the provided onClick handler.\n *\n * Options:\n *\n *   - schema: GraphQLSchema provides positionally relevant info.\n *   - onClick: A function called when a named thing is clicked.\n *\n */\n\n\n_codemirror.default.registerHelper('jump', 'graphql', (token, options) => {\n  if (!options.schema || !options.onClick || !token.state) {\n    return;\n  } // Given a Schema and a Token, produce a \"SchemaReference\" which refers to\n  // the particular artifact from the schema (such as a type, field, argument,\n  // or directive) that token references.\n\n\n  const state = token.state;\n  const kind = state.kind;\n  const step = state.step;\n  const typeInfo = (0, _getTypeInfo.default)(options.schema, state);\n\n  if (kind === 'Field' && step === 0 && typeInfo.fieldDef || kind === 'AliasedField' && step === 2 && typeInfo.fieldDef) {\n    return (0, _SchemaReference.getFieldReference)(typeInfo);\n  } else if (kind === 'Directive' && step === 1 && typeInfo.directiveDef) {\n    return (0, _SchemaReference.getDirectiveReference)(typeInfo);\n  } else if (kind === 'Argument' && step === 0 && typeInfo.argDef) {\n    return (0, _SchemaReference.getArgumentReference)(typeInfo);\n  } else if (kind === 'EnumValue' && typeInfo.enumValue) {\n    return (0, _SchemaReference.getEnumValueReference)(typeInfo);\n  } else if (kind === 'NamedType' && typeInfo.type) {\n    return (0, _SchemaReference.getTypeReference)(typeInfo);\n  }\n});","map":{"version":3,"sources":["/home/dylan/Desktop/JuryDapp/node_modules/codemirror-graphql/jump.js"],"names":["_codemirror","_interopRequireDefault","require","_getTypeInfo","_SchemaReference","obj","__esModule","default","registerHelper","token","options","schema","onClick","state","kind","step","typeInfo","fieldDef","getFieldReference","directiveDef","getDirectiveReference","argDef","getArgumentReference","enumValue","getEnumValueReference","type","getTypeReference"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAxC;;AAEA,IAAIC,YAAY,GAAGF,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAAzC;;AAEA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,yBAAD,CAA9B;;AAEAA,OAAO,CAAC,oBAAD,CAAP;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,WAAW,CAACO,OAAZ,CAAoBC,cAApB,CAAmC,MAAnC,EAA2C,SAA3C,EAAsD,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACxE,MAAI,CAACA,OAAO,CAACC,MAAT,IAAmB,CAACD,OAAO,CAACE,OAA5B,IAAuC,CAACH,KAAK,CAACI,KAAlD,EAAyD;AACvD;AACD,GAHuE,CAGtE;AACF;AACA;;;AAGA,QAAMA,KAAK,GAAGJ,KAAK,CAACI,KAApB;AACA,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,QAAMC,IAAI,GAAGF,KAAK,CAACE,IAAnB;AACA,QAAMC,QAAQ,GAAG,CAAC,GAAGb,YAAY,CAACI,OAAjB,EAA0BG,OAAO,CAACC,MAAlC,EAA0CE,KAA1C,CAAjB;;AAEA,MAAIC,IAAI,KAAK,OAAT,IAAoBC,IAAI,KAAK,CAA7B,IAAkCC,QAAQ,CAACC,QAA3C,IAAuDH,IAAI,KAAK,cAAT,IAA2BC,IAAI,KAAK,CAApC,IAAyCC,QAAQ,CAACC,QAA7G,EAAuH;AACrH,WAAO,CAAC,GAAGb,gBAAgB,CAACc,iBAArB,EAAwCF,QAAxC,CAAP;AACD,GAFD,MAEO,IAAIF,IAAI,KAAK,WAAT,IAAwBC,IAAI,KAAK,CAAjC,IAAsCC,QAAQ,CAACG,YAAnD,EAAiE;AACtE,WAAO,CAAC,GAAGf,gBAAgB,CAACgB,qBAArB,EAA4CJ,QAA5C,CAAP;AACD,GAFM,MAEA,IAAIF,IAAI,KAAK,UAAT,IAAuBC,IAAI,KAAK,CAAhC,IAAqCC,QAAQ,CAACK,MAAlD,EAA0D;AAC/D,WAAO,CAAC,GAAGjB,gBAAgB,CAACkB,oBAArB,EAA2CN,QAA3C,CAAP;AACD,GAFM,MAEA,IAAIF,IAAI,KAAK,WAAT,IAAwBE,QAAQ,CAACO,SAArC,EAAgD;AACrD,WAAO,CAAC,GAAGnB,gBAAgB,CAACoB,qBAArB,EAA4CR,QAA5C,CAAP;AACD,GAFM,MAEA,IAAIF,IAAI,KAAK,WAAT,IAAwBE,QAAQ,CAACS,IAArC,EAA2C;AAChD,WAAO,CAAC,GAAGrB,gBAAgB,CAACsB,gBAArB,EAAuCV,QAAvC,CAAP;AACD;AACF,CAxBD","sourcesContent":["\"use strict\";\n\nvar _codemirror = _interopRequireDefault(require(\"codemirror\"));\n\nvar _getTypeInfo = _interopRequireDefault(require(\"./utils/getTypeInfo\"));\n\nvar _SchemaReference = require(\"./utils/SchemaReference\");\n\nrequire(\"./utils/jump-addon\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *  Copyright (c) 2020 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n *\n */\n\n/**\n * Registers GraphQL \"jump\" links for CodeMirror.\n *\n * When command-hovering over a token, this converts it to a link, which when\n * pressed will call the provided onClick handler.\n *\n * Options:\n *\n *   - schema: GraphQLSchema provides positionally relevant info.\n *   - onClick: A function called when a named thing is clicked.\n *\n */\n_codemirror.default.registerHelper('jump', 'graphql', (token, options) => {\n  if (!options.schema || !options.onClick || !token.state) {\n    return;\n  } // Given a Schema and a Token, produce a \"SchemaReference\" which refers to\n  // the particular artifact from the schema (such as a type, field, argument,\n  // or directive) that token references.\n\n\n  const state = token.state;\n  const kind = state.kind;\n  const step = state.step;\n  const typeInfo = (0, _getTypeInfo.default)(options.schema, state);\n\n  if (kind === 'Field' && step === 0 && typeInfo.fieldDef || kind === 'AliasedField' && step === 2 && typeInfo.fieldDef) {\n    return (0, _SchemaReference.getFieldReference)(typeInfo);\n  } else if (kind === 'Directive' && step === 1 && typeInfo.directiveDef) {\n    return (0, _SchemaReference.getDirectiveReference)(typeInfo);\n  } else if (kind === 'Argument' && step === 0 && typeInfo.argDef) {\n    return (0, _SchemaReference.getArgumentReference)(typeInfo);\n  } else if (kind === 'EnumValue' && typeInfo.enumValue) {\n    return (0, _SchemaReference.getEnumValueReference)(typeInfo);\n  } else if (kind === 'NamedType' && typeInfo.type) {\n    return (0, _SchemaReference.getTypeReference)(typeInfo);\n  }\n});"]},"metadata":{},"sourceType":"script"}