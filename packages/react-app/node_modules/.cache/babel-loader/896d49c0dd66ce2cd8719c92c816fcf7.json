{"ast":null,"code":"\"use strict\";\n\nvar _codemirror = _interopRequireDefault(require(\"codemirror\"));\n\nvar _graphql = require(\"graphql\");\n\nvar _forEachState = _interopRequireDefault(require(\"../utils/forEachState\"));\n\nvar _hintList = _interopRequireDefault(require(\"../utils/hintList\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n *  Copyright (c) 2020 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * Registers a \"hint\" helper for CodeMirror.\n *\n * Using CodeMirror's \"hint\" addon: https://codemirror.net/demo/complete.html\n * Given an editor, this helper will take the token at the cursor and return a\n * list of suggested tokens.\n *\n * Options:\n *\n *   - variableToType: { [variable: string]: GraphQLInputType }\n *\n * Additional Events:\n *\n *   - hasCompletion (codemirror, data, token) - signaled when the hinter has a\n *     new list of completion suggestions.\n *\n */\n\n\n_codemirror.default.registerHelper('hint', 'graphql-variables', (editor, options) => {\n  const cur = editor.getCursor();\n  const token = editor.getTokenAt(cur);\n  const results = getVariablesHint(cur, token, options);\n\n  if (results && results.list && results.list.length > 0) {\n    results.from = _codemirror.default.Pos(results.from.line, results.from.column);\n    results.to = _codemirror.default.Pos(results.to.line, results.to.column);\n\n    _codemirror.default.signal(editor, 'hasCompletion', editor, results, token);\n  }\n\n  return results;\n});\n\nfunction getVariablesHint(cur, token, options) {\n  // If currently parsing an invalid state, attempt to hint to the prior state.\n  const state = token.state.kind === 'Invalid' ? token.state.prevState : token.state;\n  const kind = state.kind;\n  const step = state.step; // Variables can only be an object literal.\n\n  if (kind === 'Document' && step === 0) {\n    return (0, _hintList.default)(cur, token, [{\n      text: '{'\n    }]);\n  }\n\n  const variableToType = options.variableToType;\n\n  if (!variableToType) {\n    return;\n  }\n\n  const typeInfo = getTypeInfo(variableToType, token.state); // Top level should typeahead possible variables.\n\n  if (kind === 'Document' || kind === 'Variable' && step === 0) {\n    const variableNames = Object.keys(variableToType);\n    return (0, _hintList.default)(cur, token, variableNames.map(name => ({\n      text: `\"${name}\": `,\n      type: variableToType[name]\n    })));\n  } // Input Object fields\n\n\n  if (kind === 'ObjectValue' || kind === 'ObjectField' && step === 0) {\n    if (typeInfo.fields) {\n      const inputFields = Object.keys(typeInfo.fields).map(fieldName => typeInfo.fields[fieldName]);\n      return (0, _hintList.default)(cur, token, inputFields.map(field => ({\n        text: `\"${field.name}\": `,\n        type: field.type,\n        description: field.description\n      })));\n    }\n  } // Input values.\n\n\n  if (kind === 'StringValue' || kind === 'NumberValue' || kind === 'BooleanValue' || kind === 'NullValue' || kind === 'ListValue' && step === 1 || kind === 'ObjectField' && step === 2 || kind === 'Variable' && step === 2) {\n    const namedInputType = (0, _graphql.getNamedType)(typeInfo.type);\n\n    if (namedInputType instanceof _graphql.GraphQLInputObjectType) {\n      return (0, _hintList.default)(cur, token, [{\n        text: '{'\n      }]);\n    } else if (namedInputType instanceof _graphql.GraphQLEnumType) {\n      const valueMap = namedInputType.getValues();\n      const values = Object.keys(valueMap).map(name => valueMap[name]);\n      return (0, _hintList.default)(cur, token, values.map(value => ({\n        text: `\"${value.name}\"`,\n        type: namedInputType,\n        description: value.description\n      })));\n    } else if (namedInputType === _graphql.GraphQLBoolean) {\n      return (0, _hintList.default)(cur, token, [{\n        text: 'true',\n        type: _graphql.GraphQLBoolean,\n        description: 'Not false.'\n      }, {\n        text: 'false',\n        type: _graphql.GraphQLBoolean,\n        description: 'Not true.'\n      }]);\n    }\n  }\n} // Utility for collecting rich type information given any token's state\n// from the graphql-variables-mode parser.\n\n\nfunction getTypeInfo(variableToType, tokenState) {\n  const info = {\n    type: null,\n    fields: null\n  };\n  (0, _forEachState.default)(tokenState, state => {\n    if (state.kind === 'Variable') {\n      info.type = variableToType[state.name];\n    } else if (state.kind === 'ListValue') {\n      const nullableType = (0, _graphql.getNullableType)(info.type);\n      info.type = nullableType instanceof _graphql.GraphQLList ? nullableType.ofType : null;\n    } else if (state.kind === 'ObjectValue') {\n      const objectType = (0, _graphql.getNamedType)(info.type);\n      info.fields = objectType instanceof _graphql.GraphQLInputObjectType ? objectType.getFields() : null;\n    } else if (state.kind === 'ObjectField') {\n      const objectField = state.name && info.fields ? info.fields[state.name] : null;\n      info.type = objectField && objectField.type;\n    }\n  });\n  return info;\n}","map":{"version":3,"sources":["/home/dylan/Desktop/JuryDapp/node_modules/codemirror-graphql/variables/hint.js"],"names":["_codemirror","_interopRequireDefault","require","_graphql","_forEachState","_hintList","obj","__esModule","default","registerHelper","editor","options","cur","getCursor","token","getTokenAt","results","getVariablesHint","list","length","from","Pos","line","column","to","signal","state","kind","prevState","step","text","variableToType","typeInfo","getTypeInfo","variableNames","Object","keys","map","name","type","fields","inputFields","fieldName","field","description","namedInputType","getNamedType","GraphQLInputObjectType","GraphQLEnumType","valueMap","getValues","values","value","GraphQLBoolean","tokenState","info","nullableType","getNullableType","GraphQLList","ofType","objectType","getFields","objectField"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAxC;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,SAAD,CAAtB;;AAEA,IAAIE,aAAa,GAAGH,sBAAsB,CAACC,OAAO,CAAC,uBAAD,CAAR,CAA1C;;AAEA,IAAIG,SAAS,GAAGJ,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAAtC;;AAEA,SAASD,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,WAAW,CAACQ,OAAZ,CAAoBC,cAApB,CAAmC,MAAnC,EAA2C,mBAA3C,EAAgE,CAACC,MAAD,EAASC,OAAT,KAAqB;AACnF,QAAMC,GAAG,GAAGF,MAAM,CAACG,SAAP,EAAZ;AACA,QAAMC,KAAK,GAAGJ,MAAM,CAACK,UAAP,CAAkBH,GAAlB,CAAd;AACA,QAAMI,OAAO,GAAGC,gBAAgB,CAACL,GAAD,EAAME,KAAN,EAAaH,OAAb,CAAhC;;AAEA,MAAIK,OAAO,IAAIA,OAAO,CAACE,IAAnB,IAA2BF,OAAO,CAACE,IAAR,CAAaC,MAAb,GAAsB,CAArD,EAAwD;AACtDH,IAAAA,OAAO,CAACI,IAAR,GAAepB,WAAW,CAACQ,OAAZ,CAAoBa,GAApB,CAAwBL,OAAO,CAACI,IAAR,CAAaE,IAArC,EAA2CN,OAAO,CAACI,IAAR,CAAaG,MAAxD,CAAf;AACAP,IAAAA,OAAO,CAACQ,EAAR,GAAaxB,WAAW,CAACQ,OAAZ,CAAoBa,GAApB,CAAwBL,OAAO,CAACQ,EAAR,CAAWF,IAAnC,EAAyCN,OAAO,CAACQ,EAAR,CAAWD,MAApD,CAAb;;AAEAvB,IAAAA,WAAW,CAACQ,OAAZ,CAAoBiB,MAApB,CAA2Bf,MAA3B,EAAmC,eAAnC,EAAoDA,MAApD,EAA4DM,OAA5D,EAAqEF,KAArE;AACD;;AAED,SAAOE,OAAP;AACD,CAbD;;AAeA,SAASC,gBAAT,CAA0BL,GAA1B,EAA+BE,KAA/B,EAAsCH,OAAtC,EAA+C;AAC7C;AACA,QAAMe,KAAK,GAAGZ,KAAK,CAACY,KAAN,CAAYC,IAAZ,KAAqB,SAArB,GAAiCb,KAAK,CAACY,KAAN,CAAYE,SAA7C,GAAyDd,KAAK,CAACY,KAA7E;AACA,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,QAAME,IAAI,GAAGH,KAAK,CAACG,IAAnB,CAJ6C,CAIpB;;AAEzB,MAAIF,IAAI,KAAK,UAAT,IAAuBE,IAAI,KAAK,CAApC,EAAuC;AACrC,WAAO,CAAC,GAAGxB,SAAS,CAACG,OAAd,EAAuBI,GAAvB,EAA4BE,KAA5B,EAAmC,CAAC;AACzCgB,MAAAA,IAAI,EAAE;AADmC,KAAD,CAAnC,CAAP;AAGD;;AAED,QAAMC,cAAc,GAAGpB,OAAO,CAACoB,cAA/B;;AAEA,MAAI,CAACA,cAAL,EAAqB;AACnB;AACD;;AAED,QAAMC,QAAQ,GAAGC,WAAW,CAACF,cAAD,EAAiBjB,KAAK,CAACY,KAAvB,CAA5B,CAlB6C,CAkBc;;AAE3D,MAAIC,IAAI,KAAK,UAAT,IAAuBA,IAAI,KAAK,UAAT,IAAuBE,IAAI,KAAK,CAA3D,EAA8D;AAC5D,UAAMK,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYL,cAAZ,CAAtB;AACA,WAAO,CAAC,GAAG1B,SAAS,CAACG,OAAd,EAAuBI,GAAvB,EAA4BE,KAA5B,EAAmCoB,aAAa,CAACG,GAAd,CAAkBC,IAAI,KAAK;AACnER,MAAAA,IAAI,EAAG,IAAGQ,IAAK,KADoD;AAEnEC,MAAAA,IAAI,EAAER,cAAc,CAACO,IAAD;AAF+C,KAAL,CAAtB,CAAnC,CAAP;AAID,GA1B4C,CA0B3C;;;AAGF,MAAIX,IAAI,KAAK,aAAT,IAA0BA,IAAI,KAAK,aAAT,IAA0BE,IAAI,KAAK,CAAjE,EAAoE;AAClE,QAAIG,QAAQ,CAACQ,MAAb,EAAqB;AACnB,YAAMC,WAAW,GAAGN,MAAM,CAACC,IAAP,CAAYJ,QAAQ,CAACQ,MAArB,EAA6BH,GAA7B,CAAiCK,SAAS,IAAIV,QAAQ,CAACQ,MAAT,CAAgBE,SAAhB,CAA9C,CAApB;AACA,aAAO,CAAC,GAAGrC,SAAS,CAACG,OAAd,EAAuBI,GAAvB,EAA4BE,KAA5B,EAAmC2B,WAAW,CAACJ,GAAZ,CAAgBM,KAAK,KAAK;AAClEb,QAAAA,IAAI,EAAG,IAAGa,KAAK,CAACL,IAAK,KAD6C;AAElEC,QAAAA,IAAI,EAAEI,KAAK,CAACJ,IAFsD;AAGlEK,QAAAA,WAAW,EAAED,KAAK,CAACC;AAH+C,OAAL,CAArB,CAAnC,CAAP;AAKD;AACF,GAtC4C,CAsC3C;;;AAGF,MAAIjB,IAAI,KAAK,aAAT,IAA0BA,IAAI,KAAK,aAAnC,IAAoDA,IAAI,KAAK,cAA7D,IAA+EA,IAAI,KAAK,WAAxF,IAAuGA,IAAI,KAAK,WAAT,IAAwBE,IAAI,KAAK,CAAxI,IAA6IF,IAAI,KAAK,aAAT,IAA0BE,IAAI,KAAK,CAAhL,IAAqLF,IAAI,KAAK,UAAT,IAAuBE,IAAI,KAAK,CAAzN,EAA4N;AAC1N,UAAMgB,cAAc,GAAG,CAAC,GAAG1C,QAAQ,CAAC2C,YAAb,EAA2Bd,QAAQ,CAACO,IAApC,CAAvB;;AAEA,QAAIM,cAAc,YAAY1C,QAAQ,CAAC4C,sBAAvC,EAA+D;AAC7D,aAAO,CAAC,GAAG1C,SAAS,CAACG,OAAd,EAAuBI,GAAvB,EAA4BE,KAA5B,EAAmC,CAAC;AACzCgB,QAAAA,IAAI,EAAE;AADmC,OAAD,CAAnC,CAAP;AAGD,KAJD,MAIO,IAAIe,cAAc,YAAY1C,QAAQ,CAAC6C,eAAvC,EAAwD;AAC7D,YAAMC,QAAQ,GAAGJ,cAAc,CAACK,SAAf,EAAjB;AACA,YAAMC,MAAM,GAAGhB,MAAM,CAACC,IAAP,CAAYa,QAAZ,EAAsBZ,GAAtB,CAA0BC,IAAI,IAAIW,QAAQ,CAACX,IAAD,CAA1C,CAAf;AACA,aAAO,CAAC,GAAGjC,SAAS,CAACG,OAAd,EAAuBI,GAAvB,EAA4BE,KAA5B,EAAmCqC,MAAM,CAACd,GAAP,CAAWe,KAAK,KAAK;AAC7DtB,QAAAA,IAAI,EAAG,IAAGsB,KAAK,CAACd,IAAK,GADwC;AAE7DC,QAAAA,IAAI,EAAEM,cAFuD;AAG7DD,QAAAA,WAAW,EAAEQ,KAAK,CAACR;AAH0C,OAAL,CAAhB,CAAnC,CAAP;AAKD,KARM,MAQA,IAAIC,cAAc,KAAK1C,QAAQ,CAACkD,cAAhC,EAAgD;AACrD,aAAO,CAAC,GAAGhD,SAAS,CAACG,OAAd,EAAuBI,GAAvB,EAA4BE,KAA5B,EAAmC,CAAC;AACzCgB,QAAAA,IAAI,EAAE,MADmC;AAEzCS,QAAAA,IAAI,EAAEpC,QAAQ,CAACkD,cAF0B;AAGzCT,QAAAA,WAAW,EAAE;AAH4B,OAAD,EAIvC;AACDd,QAAAA,IAAI,EAAE,OADL;AAEDS,QAAAA,IAAI,EAAEpC,QAAQ,CAACkD,cAFd;AAGDT,QAAAA,WAAW,EAAE;AAHZ,OAJuC,CAAnC,CAAP;AASD;AACF;AACF,C,CAAC;AACF;;;AAGA,SAASX,WAAT,CAAqBF,cAArB,EAAqCuB,UAArC,EAAiD;AAC/C,QAAMC,IAAI,GAAG;AACXhB,IAAAA,IAAI,EAAE,IADK;AAEXC,IAAAA,MAAM,EAAE;AAFG,GAAb;AAIA,GAAC,GAAGpC,aAAa,CAACI,OAAlB,EAA2B8C,UAA3B,EAAuC5B,KAAK,IAAI;AAC9C,QAAIA,KAAK,CAACC,IAAN,KAAe,UAAnB,EAA+B;AAC7B4B,MAAAA,IAAI,CAAChB,IAAL,GAAYR,cAAc,CAACL,KAAK,CAACY,IAAP,CAA1B;AACD,KAFD,MAEO,IAAIZ,KAAK,CAACC,IAAN,KAAe,WAAnB,EAAgC;AACrC,YAAM6B,YAAY,GAAG,CAAC,GAAGrD,QAAQ,CAACsD,eAAb,EAA8BF,IAAI,CAAChB,IAAnC,CAArB;AACAgB,MAAAA,IAAI,CAAChB,IAAL,GAAYiB,YAAY,YAAYrD,QAAQ,CAACuD,WAAjC,GAA+CF,YAAY,CAACG,MAA5D,GAAqE,IAAjF;AACD,KAHM,MAGA,IAAIjC,KAAK,CAACC,IAAN,KAAe,aAAnB,EAAkC;AACvC,YAAMiC,UAAU,GAAG,CAAC,GAAGzD,QAAQ,CAAC2C,YAAb,EAA2BS,IAAI,CAAChB,IAAhC,CAAnB;AACAgB,MAAAA,IAAI,CAACf,MAAL,GAAcoB,UAAU,YAAYzD,QAAQ,CAAC4C,sBAA/B,GAAwDa,UAAU,CAACC,SAAX,EAAxD,GAAiF,IAA/F;AACD,KAHM,MAGA,IAAInC,KAAK,CAACC,IAAN,KAAe,aAAnB,EAAkC;AACvC,YAAMmC,WAAW,GAAGpC,KAAK,CAACY,IAAN,IAAciB,IAAI,CAACf,MAAnB,GAA4Be,IAAI,CAACf,MAAL,CAAYd,KAAK,CAACY,IAAlB,CAA5B,GAAsD,IAA1E;AACAiB,MAAAA,IAAI,CAAChB,IAAL,GAAYuB,WAAW,IAAIA,WAAW,CAACvB,IAAvC;AACD;AACF,GAbD;AAcA,SAAOgB,IAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _codemirror = _interopRequireDefault(require(\"codemirror\"));\n\nvar _graphql = require(\"graphql\");\n\nvar _forEachState = _interopRequireDefault(require(\"../utils/forEachState\"));\n\nvar _hintList = _interopRequireDefault(require(\"../utils/hintList\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *  Copyright (c) 2020 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * Registers a \"hint\" helper for CodeMirror.\n *\n * Using CodeMirror's \"hint\" addon: https://codemirror.net/demo/complete.html\n * Given an editor, this helper will take the token at the cursor and return a\n * list of suggested tokens.\n *\n * Options:\n *\n *   - variableToType: { [variable: string]: GraphQLInputType }\n *\n * Additional Events:\n *\n *   - hasCompletion (codemirror, data, token) - signaled when the hinter has a\n *     new list of completion suggestions.\n *\n */\n_codemirror.default.registerHelper('hint', 'graphql-variables', (editor, options) => {\n  const cur = editor.getCursor();\n  const token = editor.getTokenAt(cur);\n  const results = getVariablesHint(cur, token, options);\n\n  if (results && results.list && results.list.length > 0) {\n    results.from = _codemirror.default.Pos(results.from.line, results.from.column);\n    results.to = _codemirror.default.Pos(results.to.line, results.to.column);\n\n    _codemirror.default.signal(editor, 'hasCompletion', editor, results, token);\n  }\n\n  return results;\n});\n\nfunction getVariablesHint(cur, token, options) {\n  // If currently parsing an invalid state, attempt to hint to the prior state.\n  const state = token.state.kind === 'Invalid' ? token.state.prevState : token.state;\n  const kind = state.kind;\n  const step = state.step; // Variables can only be an object literal.\n\n  if (kind === 'Document' && step === 0) {\n    return (0, _hintList.default)(cur, token, [{\n      text: '{'\n    }]);\n  }\n\n  const variableToType = options.variableToType;\n\n  if (!variableToType) {\n    return;\n  }\n\n  const typeInfo = getTypeInfo(variableToType, token.state); // Top level should typeahead possible variables.\n\n  if (kind === 'Document' || kind === 'Variable' && step === 0) {\n    const variableNames = Object.keys(variableToType);\n    return (0, _hintList.default)(cur, token, variableNames.map(name => ({\n      text: `\"${name}\": `,\n      type: variableToType[name]\n    })));\n  } // Input Object fields\n\n\n  if (kind === 'ObjectValue' || kind === 'ObjectField' && step === 0) {\n    if (typeInfo.fields) {\n      const inputFields = Object.keys(typeInfo.fields).map(fieldName => typeInfo.fields[fieldName]);\n      return (0, _hintList.default)(cur, token, inputFields.map(field => ({\n        text: `\"${field.name}\": `,\n        type: field.type,\n        description: field.description\n      })));\n    }\n  } // Input values.\n\n\n  if (kind === 'StringValue' || kind === 'NumberValue' || kind === 'BooleanValue' || kind === 'NullValue' || kind === 'ListValue' && step === 1 || kind === 'ObjectField' && step === 2 || kind === 'Variable' && step === 2) {\n    const namedInputType = (0, _graphql.getNamedType)(typeInfo.type);\n\n    if (namedInputType instanceof _graphql.GraphQLInputObjectType) {\n      return (0, _hintList.default)(cur, token, [{\n        text: '{'\n      }]);\n    } else if (namedInputType instanceof _graphql.GraphQLEnumType) {\n      const valueMap = namedInputType.getValues();\n      const values = Object.keys(valueMap).map(name => valueMap[name]);\n      return (0, _hintList.default)(cur, token, values.map(value => ({\n        text: `\"${value.name}\"`,\n        type: namedInputType,\n        description: value.description\n      })));\n    } else if (namedInputType === _graphql.GraphQLBoolean) {\n      return (0, _hintList.default)(cur, token, [{\n        text: 'true',\n        type: _graphql.GraphQLBoolean,\n        description: 'Not false.'\n      }, {\n        text: 'false',\n        type: _graphql.GraphQLBoolean,\n        description: 'Not true.'\n      }]);\n    }\n  }\n} // Utility for collecting rich type information given any token's state\n// from the graphql-variables-mode parser.\n\n\nfunction getTypeInfo(variableToType, tokenState) {\n  const info = {\n    type: null,\n    fields: null\n  };\n  (0, _forEachState.default)(tokenState, state => {\n    if (state.kind === 'Variable') {\n      info.type = variableToType[state.name];\n    } else if (state.kind === 'ListValue') {\n      const nullableType = (0, _graphql.getNullableType)(info.type);\n      info.type = nullableType instanceof _graphql.GraphQLList ? nullableType.ofType : null;\n    } else if (state.kind === 'ObjectValue') {\n      const objectType = (0, _graphql.getNamedType)(info.type);\n      info.fields = objectType instanceof _graphql.GraphQLInputObjectType ? objectType.getFields() : null;\n    } else if (state.kind === 'ObjectField') {\n      const objectField = state.name && info.fields ? info.fields[state.name] : null;\n      info.type = objectField && objectField.type;\n    }\n  });\n  return info;\n}"]},"metadata":{},"sourceType":"script"}