{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFieldReference = getFieldReference;\nexports.getDirectiveReference = getDirectiveReference;\nexports.getArgumentReference = getArgumentReference;\nexports.getEnumValueReference = getEnumValueReference;\nexports.getTypeReference = getTypeReference;\n\nvar _graphql = require(\"graphql\");\n/**\n *  Copyright (c) 2020 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n\nfunction getFieldReference(typeInfo) {\n  return {\n    kind: 'Field',\n    schema: typeInfo.schema,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType\n  };\n}\n\nfunction getDirectiveReference(typeInfo) {\n  return {\n    kind: 'Directive',\n    schema: typeInfo.schema,\n    directive: typeInfo.directiveDef\n  };\n}\n\nfunction getArgumentReference(typeInfo) {\n  return typeInfo.directiveDef ? {\n    kind: 'Argument',\n    schema: typeInfo.schema,\n    argument: typeInfo.argDef,\n    directive: typeInfo.directiveDef\n  } : {\n    kind: 'Argument',\n    schema: typeInfo.schema,\n    argument: typeInfo.argDef,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType\n  };\n}\n\nfunction getEnumValueReference(typeInfo) {\n  return {\n    kind: 'EnumValue',\n    value: typeInfo.enumValue,\n    // $FlowFixMe\n    type: (0, _graphql.getNamedType)(typeInfo.inputType)\n  };\n} // Note: for reusability, getTypeReference can produce a reference to any type,\n// though it defaults to the current type.\n\n\nfunction getTypeReference(typeInfo, type) {\n  return {\n    kind: 'Type',\n    schema: typeInfo.schema,\n    type: type || typeInfo.type\n  };\n}\n\nfunction isMetaField(fieldDef) {\n  return fieldDef.name.slice(0, 2) === '__';\n}","map":{"version":3,"sources":["/home/dylan/Desktop/JuryDapp/node_modules/codemirror-graphql/utils/SchemaReference.js"],"names":["Object","defineProperty","exports","value","getFieldReference","getDirectiveReference","getArgumentReference","getEnumValueReference","getTypeReference","_graphql","require","typeInfo","kind","schema","field","fieldDef","type","isMetaField","parentType","directive","directiveDef","argument","argDef","enumValue","getNamedType","inputType","name","slice"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B;AACAF,OAAO,CAACG,qBAAR,GAAgCA,qBAAhC;AACAH,OAAO,CAACI,oBAAR,GAA+BA,oBAA/B;AACAJ,OAAO,CAACK,qBAAR,GAAgCA,qBAAhC;AACAL,OAAO,CAACM,gBAAR,GAA2BA,gBAA3B;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,SAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASN,iBAAT,CAA2BO,QAA3B,EAAqC;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAE,OADD;AAELC,IAAAA,MAAM,EAAEF,QAAQ,CAACE,MAFZ;AAGLC,IAAAA,KAAK,EAAEH,QAAQ,CAACI,QAHX;AAILC,IAAAA,IAAI,EAAEC,WAAW,CAACN,QAAQ,CAACI,QAAV,CAAX,GAAiC,IAAjC,GAAwCJ,QAAQ,CAACO;AAJlD,GAAP;AAMD;;AAED,SAASb,qBAAT,CAA+BM,QAA/B,EAAyC;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAE,WADD;AAELC,IAAAA,MAAM,EAAEF,QAAQ,CAACE,MAFZ;AAGLM,IAAAA,SAAS,EAAER,QAAQ,CAACS;AAHf,GAAP;AAKD;;AAED,SAASd,oBAAT,CAA8BK,QAA9B,EAAwC;AACtC,SAAOA,QAAQ,CAACS,YAAT,GAAwB;AAC7BR,IAAAA,IAAI,EAAE,UADuB;AAE7BC,IAAAA,MAAM,EAAEF,QAAQ,CAACE,MAFY;AAG7BQ,IAAAA,QAAQ,EAAEV,QAAQ,CAACW,MAHU;AAI7BH,IAAAA,SAAS,EAAER,QAAQ,CAACS;AAJS,GAAxB,GAKH;AACFR,IAAAA,IAAI,EAAE,UADJ;AAEFC,IAAAA,MAAM,EAAEF,QAAQ,CAACE,MAFf;AAGFQ,IAAAA,QAAQ,EAAEV,QAAQ,CAACW,MAHjB;AAIFR,IAAAA,KAAK,EAAEH,QAAQ,CAACI,QAJd;AAKFC,IAAAA,IAAI,EAAEC,WAAW,CAACN,QAAQ,CAACI,QAAV,CAAX,GAAiC,IAAjC,GAAwCJ,QAAQ,CAACO;AALrD,GALJ;AAYD;;AAED,SAASX,qBAAT,CAA+BI,QAA/B,EAAyC;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAE,WADD;AAELT,IAAAA,KAAK,EAAEQ,QAAQ,CAACY,SAFX;AAGL;AACAP,IAAAA,IAAI,EAAE,CAAC,GAAGP,QAAQ,CAACe,YAAb,EAA2Bb,QAAQ,CAACc,SAApC;AAJD,GAAP;AAMD,C,CAAC;AACF;;;AAGA,SAASjB,gBAAT,CAA0BG,QAA1B,EAAoCK,IAApC,EAA0C;AACxC,SAAO;AACLJ,IAAAA,IAAI,EAAE,MADD;AAELC,IAAAA,MAAM,EAAEF,QAAQ,CAACE,MAFZ;AAGLG,IAAAA,IAAI,EAAEA,IAAI,IAAIL,QAAQ,CAACK;AAHlB,GAAP;AAKD;;AAED,SAASC,WAAT,CAAqBF,QAArB,EAA+B;AAC7B,SAAOA,QAAQ,CAACW,IAAT,CAAcC,KAAd,CAAoB,CAApB,EAAuB,CAAvB,MAA8B,IAArC;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFieldReference = getFieldReference;\nexports.getDirectiveReference = getDirectiveReference;\nexports.getArgumentReference = getArgumentReference;\nexports.getEnumValueReference = getEnumValueReference;\nexports.getTypeReference = getTypeReference;\n\nvar _graphql = require(\"graphql\");\n\n/**\n *  Copyright (c) 2020 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\nfunction getFieldReference(typeInfo) {\n  return {\n    kind: 'Field',\n    schema: typeInfo.schema,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType\n  };\n}\n\nfunction getDirectiveReference(typeInfo) {\n  return {\n    kind: 'Directive',\n    schema: typeInfo.schema,\n    directive: typeInfo.directiveDef\n  };\n}\n\nfunction getArgumentReference(typeInfo) {\n  return typeInfo.directiveDef ? {\n    kind: 'Argument',\n    schema: typeInfo.schema,\n    argument: typeInfo.argDef,\n    directive: typeInfo.directiveDef\n  } : {\n    kind: 'Argument',\n    schema: typeInfo.schema,\n    argument: typeInfo.argDef,\n    field: typeInfo.fieldDef,\n    type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType\n  };\n}\n\nfunction getEnumValueReference(typeInfo) {\n  return {\n    kind: 'EnumValue',\n    value: typeInfo.enumValue,\n    // $FlowFixMe\n    type: (0, _graphql.getNamedType)(typeInfo.inputType)\n  };\n} // Note: for reusability, getTypeReference can produce a reference to any type,\n// though it defaults to the current type.\n\n\nfunction getTypeReference(typeInfo, type) {\n  return {\n    kind: 'Type',\n    schema: typeInfo.schema,\n    type: type || typeInfo.type\n  };\n}\n\nfunction isMetaField(fieldDef) {\n  return fieldDef.name.slice(0, 2) === '__';\n}"]},"metadata":{},"sourceType":"script"}