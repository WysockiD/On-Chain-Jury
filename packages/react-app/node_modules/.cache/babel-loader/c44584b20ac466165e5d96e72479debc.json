{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst aes_1 = require(\"./aes\");\n\nconst ecdh_1 = require(\"./ecdh\");\n\nconst ecdsa_1 = require(\"./ecdsa\");\n\nconst hmac_1 = require(\"./hmac\");\n\nconst random_1 = require(\"./random\");\n\nconst sha2_1 = require(\"./sha2\");\n\nconst constants_1 = require(\"./constants\");\n\nconst helpers_1 = require(\"./helpers\");\n\nfunction getSharedKey(privateKey, publicKey) {\n  publicKey = ecdsa_1.decompress(publicKey);\n  return ecdh_1.derive(privateKey, publicKey);\n}\n\nfunction getEncryptionKey(hash) {\n  return Buffer.from(hash.slice(constants_1.LENGTH_0, constants_1.KEY_LENGTH));\n}\n\nfunction getMacKey(hash) {\n  return Buffer.from(hash.slice(constants_1.KEY_LENGTH));\n}\n\nfunction getEciesKeys(privateKey, publicKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const sharedKey = getSharedKey(privateKey, publicKey);\n    const hash = yield sha2_1.sha512(sharedKey);\n    return {\n      encryptionKey: getEncryptionKey(hash),\n      macKey: getMacKey(hash)\n    };\n  });\n}\n\nfunction getEciesKeysSync(privateKey, publicKey) {\n  const sharedKey = getSharedKey(privateKey, publicKey);\n  const hash = sha2_1.sha512Sync(sharedKey);\n  return {\n    encryptionKey: getEncryptionKey(hash),\n    macKey: getMacKey(hash)\n  };\n}\n\nfunction getEphemKeyPair(opts) {\n  var _a, _b;\n\n  let ephemPrivateKey = ((_a = opts) === null || _a === void 0 ? void 0 : _a.ephemPrivateKey) || random_1.randomBytes(constants_1.KEY_LENGTH);\n\n  while (!helpers_1.isValidPrivateKey(ephemPrivateKey)) {\n    ephemPrivateKey = ((_b = opts) === null || _b === void 0 ? void 0 : _b.ephemPrivateKey) || random_1.randomBytes(constants_1.KEY_LENGTH);\n  }\n\n  const ephemPublicKey = ecdsa_1.getPublic(ephemPrivateKey);\n  return {\n    ephemPrivateKey,\n    ephemPublicKey\n  };\n}\n\nfunction encrypt(publicKeyTo, msg, opts) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      ephemPrivateKey,\n      ephemPublicKey\n    } = getEphemKeyPair(opts);\n    const {\n      encryptionKey,\n      macKey\n    } = yield getEciesKeys(ephemPrivateKey, publicKeyTo);\n    const iv = ((_a = opts) === null || _a === void 0 ? void 0 : _a.iv) || random_1.randomBytes(constants_1.IV_LENGTH);\n    const ciphertext = yield aes_1.aesCbcEncrypt(iv, encryptionKey, msg);\n    const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n    const mac = yield hmac_1.hmacSha256Sign(macKey, dataToMac);\n    return {\n      iv,\n      ephemPublicKey,\n      ciphertext,\n      mac: mac\n    };\n  });\n}\n\nexports.encrypt = encrypt;\n\nfunction decrypt(privateKey, opts) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      ephemPublicKey,\n      iv,\n      mac,\n      ciphertext\n    } = opts;\n    const {\n      encryptionKey,\n      macKey\n    } = yield getEciesKeys(privateKey, ephemPublicKey);\n    const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n    const macTest = yield hmac_1.hmacSha256Verify(macKey, dataToMac, mac);\n    helpers_1.assert(macTest, constants_1.ERROR_BAD_MAC);\n    const msg = yield aes_1.aesCbcDecrypt(opts.iv, encryptionKey, opts.ciphertext);\n    return msg;\n  });\n}\n\nexports.decrypt = decrypt;\n\nfunction encryptSync(publicKeyTo, msg, opts) {\n  var _a;\n\n  const {\n    ephemPrivateKey,\n    ephemPublicKey\n  } = getEphemKeyPair(opts);\n  const {\n    encryptionKey,\n    macKey\n  } = getEciesKeysSync(ephemPrivateKey, publicKeyTo);\n  const iv = ((_a = opts) === null || _a === void 0 ? void 0 : _a.iv) || random_1.randomBytes(constants_1.IV_LENGTH);\n  const ciphertext = aes_1.aesCbcEncryptSync(iv, encryptionKey, msg);\n  const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n  const mac = hmac_1.hmacSha256SignSync(macKey, dataToMac);\n  return {\n    iv,\n    ephemPublicKey,\n    ciphertext,\n    mac: mac\n  };\n}\n\nexports.encryptSync = encryptSync;\n\nfunction decryptSync(privateKey, opts) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      ephemPublicKey,\n      iv,\n      mac,\n      ciphertext\n    } = opts;\n    const {\n      encryptionKey,\n      macKey\n    } = getEciesKeysSync(privateKey, ephemPublicKey);\n    const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n    const macTest = hmac_1.hmacSha256VerifySync(macKey, dataToMac, mac);\n    helpers_1.assert(macTest, constants_1.ERROR_BAD_MAC);\n    const msg = aes_1.aesCbcDecryptSync(opts.iv, encryptionKey, opts.ciphertext);\n    return msg;\n  });\n}\n\nexports.decryptSync = decryptSync;\n\nfunction serialize(opts) {\n  const ephemPublicKey = ecdsa_1.compress(opts.ephemPublicKey);\n  return helpers_1.concatBuffers(opts.iv, ephemPublicKey, opts.mac, opts.ciphertext);\n}\n\nexports.serialize = serialize;\n\nfunction deserialize(buf) {\n  const slice0 = constants_1.LENGTH_0;\n  const slice1 = slice0 + constants_1.IV_LENGTH;\n  const slice2 = slice1 + constants_1.PREFIXED_KEY_LENGTH;\n  const slice3 = slice2 + constants_1.MAC_LENGTH;\n  const slice4 = buf.length;\n  return {\n    iv: buf.slice(slice0, slice1),\n    ephemPublicKey: ecdsa_1.decompress(buf.slice(slice1, slice2)),\n    mac: buf.slice(slice2, slice3),\n    ciphertext: buf.slice(slice3, slice4)\n  };\n}\n\nexports.deserialize = deserialize;","map":{"version":3,"sources":["../../src/ecies.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAMA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAMA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAQA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAQA,SAAS,YAAT,CAAsB,UAAtB,EAA0C,SAA1C,EAA2D;AACzD,EAAA,SAAS,GAAG,OAAA,CAAA,UAAA,CAAW,SAAX,CAAZ;AACA,SAAO,MAAA,CAAA,MAAA,CAAO,UAAP,EAAmB,SAAnB,CAAP;AACD;;AAED,SAAS,gBAAT,CAA0B,IAA1B,EAAsC;AACpC,SAAO,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,KAAL,CAAW,WAAA,CAAA,QAAX,EAAqB,WAAA,CAAA,UAArB,CAAZ,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,IAAnB,EAA+B;AAC7B,SAAO,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,KAAL,CAAW,WAAA,CAAA,UAAX,CAAZ,CAAP;AACD;;AAED,SAAe,YAAf,CAA4B,UAA5B,EAAgD,SAAhD,EAAiE;;AAC/D,UAAM,SAAS,GAAG,YAAY,CAAC,UAAD,EAAa,SAAb,CAA9B;AACA,UAAM,IAAI,GAAG,MAAM,MAAA,CAAA,MAAA,CAAO,SAAP,CAAnB;AACA,WAAO;AAAE,MAAA,aAAa,EAAE,gBAAgB,CAAC,IAAD,CAAjC;AAAyC,MAAA,MAAM,EAAE,SAAS,CAAC,IAAD;AAA1D,KAAP;AACD,G;AAAA;;AAED,SAAS,gBAAT,CAA0B,UAA1B,EAA8C,SAA9C,EAA+D;AAC7D,QAAM,SAAS,GAAG,YAAY,CAAC,UAAD,EAAa,SAAb,CAA9B;AACA,QAAM,IAAI,GAAG,MAAA,CAAA,UAAA,CAAW,SAAX,CAAb;AACA,SAAO;AAAE,IAAA,aAAa,EAAE,gBAAgB,CAAC,IAAD,CAAjC;AAAyC,IAAA,MAAM,EAAE,SAAS,CAAC,IAAD;AAA1D,GAAP;AACD;;AAED,SAAS,eAAT,CAAyB,IAAzB,EAAuD;;;AACrD,MAAI,eAAe,GAAG,CAAA,CAAA,EAAA,GAAA,IAAA,MAAI,IAAJ,IAAI,EAAA,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAI,EAAA,CAAE,eAAN,KAAyB,QAAA,CAAA,WAAA,CAAY,WAAA,CAAA,UAAZ,CAA/C;;AACA,SAAO,CAAC,SAAA,CAAA,iBAAA,CAAkB,eAAlB,CAAR,EAA4C;AAC1C,IAAA,eAAe,GAAG,CAAA,CAAA,EAAA,GAAA,IAAA,MAAI,IAAJ,IAAI,EAAA,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAI,EAAA,CAAE,eAAN,KAAyB,QAAA,CAAA,WAAA,CAAY,WAAA,CAAA,UAAZ,CAA3C;AACD;;AACD,QAAM,cAAc,GAAG,OAAA,CAAA,SAAA,CAAU,eAAV,CAAvB;AACA,SAAO;AAAE,IAAA,eAAF;AAAmB,IAAA;AAAnB,GAAP;AACD;;AAED,SAAsB,OAAtB,CACE,WADF,EAEE,GAFF,EAGE,IAHF,EAGgC;;;;AAE9B,UAAM;AAAE,MAAA,eAAF;AAAmB,MAAA;AAAnB,QAAsC,eAAe,CAAC,IAAD,CAA3D;AACA,UAAM;AAAE,MAAA,aAAF;AAAiB,MAAA;AAAjB,QAA4B,MAAM,YAAY,CAClD,eADkD,EAElD,WAFkD,CAApD;AAIA,UAAM,EAAE,GAAG,CAAA,CAAA,EAAA,GAAA,IAAA,MAAI,IAAJ,IAAI,EAAA,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAI,EAAA,CAAE,EAAN,KAAY,QAAA,CAAA,WAAA,CAAY,WAAA,CAAA,SAAZ,CAAvB;AACA,UAAM,UAAU,GAAG,MAAM,KAAA,CAAA,aAAA,CAAc,EAAd,EAAkB,aAAlB,EAAiC,GAAjC,CAAzB;AACA,UAAM,SAAS,GAAG,SAAA,CAAA,aAAA,CAAc,EAAd,EAAkB,cAAlB,EAAkC,UAAlC,CAAlB;AACA,UAAM,GAAG,GAAG,MAAM,MAAA,CAAA,cAAA,CAAe,MAAf,EAAuB,SAAvB,CAAlB;AACA,WAAO;AAAE,MAAA,EAAF;AAAM,MAAA,cAAN;AAAsB,MAAA,UAAtB;AAAkC,MAAA,GAAG,EAAE;AAAvC,KAAP;;AACD;;AAfD,OAAA,CAAA,OAAA,GAAA,OAAA;;AAiBA,SAAsB,OAAtB,CACE,UADF,EAEE,IAFF,EAEiB;;AAEf,UAAM;AAAE,MAAA,cAAF;AAAkB,MAAA,EAAlB;AAAsB,MAAA,GAAtB;AAA2B,MAAA;AAA3B,QAA0C,IAAhD;AACA,UAAM;AAAE,MAAA,aAAF;AAAiB,MAAA;AAAjB,QAA4B,MAAM,YAAY,CAClD,UADkD,EAElD,cAFkD,CAApD;AAIA,UAAM,SAAS,GAAG,SAAA,CAAA,aAAA,CAAc,EAAd,EAAkB,cAAlB,EAAkC,UAAlC,CAAlB;AACA,UAAM,OAAO,GAAG,MAAM,MAAA,CAAA,gBAAA,CAAiB,MAAjB,EAAyB,SAAzB,EAAoC,GAApC,CAAtB;AACA,IAAA,SAAA,CAAA,MAAA,CAAO,OAAP,EAAgB,WAAA,CAAA,aAAhB;AACA,UAAM,GAAG,GAAG,MAAM,KAAA,CAAA,aAAA,CAAc,IAAI,CAAC,EAAnB,EAAuB,aAAvB,EAAsC,IAAI,CAAC,UAA3C,CAAlB;AACA,WAAO,GAAP;AACD,G;AAAA;;AAdD,OAAA,CAAA,OAAA,GAAA,OAAA;;AAgBA,SAAgB,WAAhB,CACE,WADF,EAEE,GAFF,EAGE,IAHF,EAGgC;;;AAE9B,QAAM;AAAE,IAAA,eAAF;AAAmB,IAAA;AAAnB,MAAsC,eAAe,CAAC,IAAD,CAA3D;AACA,QAAM;AAAE,IAAA,aAAF;AAAiB,IAAA;AAAjB,MAA4B,gBAAgB,CAChD,eADgD,EAEhD,WAFgD,CAAlD;AAIA,QAAM,EAAE,GAAG,CAAA,CAAA,EAAA,GAAA,IAAA,MAAI,IAAJ,IAAI,EAAA,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAI,EAAA,CAAE,EAAN,KAAY,QAAA,CAAA,WAAA,CAAY,WAAA,CAAA,SAAZ,CAAvB;AACA,QAAM,UAAU,GAAG,KAAA,CAAA,iBAAA,CAAkB,EAAlB,EAAsB,aAAtB,EAAqC,GAArC,CAAnB;AACA,QAAM,SAAS,GAAG,SAAA,CAAA,aAAA,CAAc,EAAd,EAAkB,cAAlB,EAAkC,UAAlC,CAAlB;AACA,QAAM,GAAG,GAAG,MAAA,CAAA,kBAAA,CAAmB,MAAnB,EAA2B,SAA3B,CAAZ;AACA,SAAO;AAAE,IAAA,EAAF;AAAM,IAAA,cAAN;AAAsB,IAAA,UAAtB;AAAkC,IAAA,GAAG,EAAE;AAAvC,GAAP;AACD;;AAfD,OAAA,CAAA,WAAA,GAAA,WAAA;;AAiBA,SAAsB,WAAtB,CACE,UADF,EAEE,IAFF,EAEiB;;AAEf,UAAM;AAAE,MAAA,cAAF;AAAkB,MAAA,EAAlB;AAAsB,MAAA,GAAtB;AAA2B,MAAA;AAA3B,QAA0C,IAAhD;AACA,UAAM;AAAE,MAAA,aAAF;AAAiB,MAAA;AAAjB,QAA4B,gBAAgB,CAChD,UADgD,EAEhD,cAFgD,CAAlD;AAIA,UAAM,SAAS,GAAG,SAAA,CAAA,aAAA,CAAc,EAAd,EAAkB,cAAlB,EAAkC,UAAlC,CAAlB;AACA,UAAM,OAAO,GAAG,MAAA,CAAA,oBAAA,CAAqB,MAArB,EAA6B,SAA7B,EAAwC,GAAxC,CAAhB;AACA,IAAA,SAAA,CAAA,MAAA,CAAO,OAAP,EAAgB,WAAA,CAAA,aAAhB;AACA,UAAM,GAAG,GAAG,KAAA,CAAA,iBAAA,CAAkB,IAAI,CAAC,EAAvB,EAA2B,aAA3B,EAA0C,IAAI,CAAC,UAA/C,CAAZ;AACA,WAAO,GAAP;AACD,G;AAAA;;AAdD,OAAA,CAAA,WAAA,GAAA,WAAA;;AAgBA,SAAgB,SAAhB,CAA0B,IAA1B,EAAyC;AACvC,QAAM,cAAc,GAAG,OAAA,CAAA,QAAA,CAAS,IAAI,CAAC,cAAd,CAAvB;AACA,SAAO,SAAA,CAAA,aAAA,CAAc,IAAI,CAAC,EAAnB,EAAuB,cAAvB,EAAuC,IAAI,CAAC,GAA5C,EAAiD,IAAI,CAAC,UAAtD,CAAP;AACD;;AAHD,OAAA,CAAA,SAAA,GAAA,SAAA;;AAKA,SAAgB,WAAhB,CAA4B,GAA5B,EAAuC;AACrC,QAAM,MAAM,GAAG,WAAA,CAAA,QAAf;AACA,QAAM,MAAM,GAAG,MAAM,GAAG,WAAA,CAAA,SAAxB;AACA,QAAM,MAAM,GAAG,MAAM,GAAG,WAAA,CAAA,mBAAxB;AACA,QAAM,MAAM,GAAG,MAAM,GAAG,WAAA,CAAA,UAAxB;AACA,QAAM,MAAM,GAAG,GAAG,CAAC,MAAnB;AACA,SAAO;AACL,IAAA,EAAE,EAAE,GAAG,CAAC,KAAJ,CAAU,MAAV,EAAkB,MAAlB,CADC;AAEL,IAAA,cAAc,EAAE,OAAA,CAAA,UAAA,CAAW,GAAG,CAAC,KAAJ,CAAU,MAAV,EAAkB,MAAlB,CAAX,CAFX;AAGL,IAAA,GAAG,EAAE,GAAG,CAAC,KAAJ,CAAU,MAAV,EAAkB,MAAlB,CAHA;AAIL,IAAA,UAAU,EAAE,GAAG,CAAC,KAAJ,CAAU,MAAV,EAAkB,MAAlB;AAJP,GAAP;AAMD;;AAZD,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst aes_1 = require(\"./aes\");\nconst ecdh_1 = require(\"./ecdh\");\nconst ecdsa_1 = require(\"./ecdsa\");\nconst hmac_1 = require(\"./hmac\");\nconst random_1 = require(\"./random\");\nconst sha2_1 = require(\"./sha2\");\nconst constants_1 = require(\"./constants\");\nconst helpers_1 = require(\"./helpers\");\nfunction getSharedKey(privateKey, publicKey) {\n    publicKey = ecdsa_1.decompress(publicKey);\n    return ecdh_1.derive(privateKey, publicKey);\n}\nfunction getEncryptionKey(hash) {\n    return Buffer.from(hash.slice(constants_1.LENGTH_0, constants_1.KEY_LENGTH));\n}\nfunction getMacKey(hash) {\n    return Buffer.from(hash.slice(constants_1.KEY_LENGTH));\n}\nfunction getEciesKeys(privateKey, publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const sharedKey = getSharedKey(privateKey, publicKey);\n        const hash = yield sha2_1.sha512(sharedKey);\n        return { encryptionKey: getEncryptionKey(hash), macKey: getMacKey(hash) };\n    });\n}\nfunction getEciesKeysSync(privateKey, publicKey) {\n    const sharedKey = getSharedKey(privateKey, publicKey);\n    const hash = sha2_1.sha512Sync(sharedKey);\n    return { encryptionKey: getEncryptionKey(hash), macKey: getMacKey(hash) };\n}\nfunction getEphemKeyPair(opts) {\n    var _a, _b;\n    let ephemPrivateKey = ((_a = opts) === null || _a === void 0 ? void 0 : _a.ephemPrivateKey) || random_1.randomBytes(constants_1.KEY_LENGTH);\n    while (!helpers_1.isValidPrivateKey(ephemPrivateKey)) {\n        ephemPrivateKey = ((_b = opts) === null || _b === void 0 ? void 0 : _b.ephemPrivateKey) || random_1.randomBytes(constants_1.KEY_LENGTH);\n    }\n    const ephemPublicKey = ecdsa_1.getPublic(ephemPrivateKey);\n    return { ephemPrivateKey, ephemPublicKey };\n}\nfunction encrypt(publicKeyTo, msg, opts) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const { ephemPrivateKey, ephemPublicKey } = getEphemKeyPair(opts);\n        const { encryptionKey, macKey } = yield getEciesKeys(ephemPrivateKey, publicKeyTo);\n        const iv = ((_a = opts) === null || _a === void 0 ? void 0 : _a.iv) || random_1.randomBytes(constants_1.IV_LENGTH);\n        const ciphertext = yield aes_1.aesCbcEncrypt(iv, encryptionKey, msg);\n        const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n        const mac = yield hmac_1.hmacSha256Sign(macKey, dataToMac);\n        return { iv, ephemPublicKey, ciphertext, mac: mac };\n    });\n}\nexports.encrypt = encrypt;\nfunction decrypt(privateKey, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { ephemPublicKey, iv, mac, ciphertext } = opts;\n        const { encryptionKey, macKey } = yield getEciesKeys(privateKey, ephemPublicKey);\n        const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n        const macTest = yield hmac_1.hmacSha256Verify(macKey, dataToMac, mac);\n        helpers_1.assert(macTest, constants_1.ERROR_BAD_MAC);\n        const msg = yield aes_1.aesCbcDecrypt(opts.iv, encryptionKey, opts.ciphertext);\n        return msg;\n    });\n}\nexports.decrypt = decrypt;\nfunction encryptSync(publicKeyTo, msg, opts) {\n    var _a;\n    const { ephemPrivateKey, ephemPublicKey } = getEphemKeyPair(opts);\n    const { encryptionKey, macKey } = getEciesKeysSync(ephemPrivateKey, publicKeyTo);\n    const iv = ((_a = opts) === null || _a === void 0 ? void 0 : _a.iv) || random_1.randomBytes(constants_1.IV_LENGTH);\n    const ciphertext = aes_1.aesCbcEncryptSync(iv, encryptionKey, msg);\n    const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n    const mac = hmac_1.hmacSha256SignSync(macKey, dataToMac);\n    return { iv, ephemPublicKey, ciphertext, mac: mac };\n}\nexports.encryptSync = encryptSync;\nfunction decryptSync(privateKey, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { ephemPublicKey, iv, mac, ciphertext } = opts;\n        const { encryptionKey, macKey } = getEciesKeysSync(privateKey, ephemPublicKey);\n        const dataToMac = helpers_1.concatBuffers(iv, ephemPublicKey, ciphertext);\n        const macTest = hmac_1.hmacSha256VerifySync(macKey, dataToMac, mac);\n        helpers_1.assert(macTest, constants_1.ERROR_BAD_MAC);\n        const msg = aes_1.aesCbcDecryptSync(opts.iv, encryptionKey, opts.ciphertext);\n        return msg;\n    });\n}\nexports.decryptSync = decryptSync;\nfunction serialize(opts) {\n    const ephemPublicKey = ecdsa_1.compress(opts.ephemPublicKey);\n    return helpers_1.concatBuffers(opts.iv, ephemPublicKey, opts.mac, opts.ciphertext);\n}\nexports.serialize = serialize;\nfunction deserialize(buf) {\n    const slice0 = constants_1.LENGTH_0;\n    const slice1 = slice0 + constants_1.IV_LENGTH;\n    const slice2 = slice1 + constants_1.PREFIXED_KEY_LENGTH;\n    const slice3 = slice2 + constants_1.MAC_LENGTH;\n    const slice4 = buf.length;\n    return {\n        iv: buf.slice(slice0, slice1),\n        ephemPublicKey: ecdsa_1.decompress(buf.slice(slice1, slice2)),\n        mac: buf.slice(slice2, slice3),\n        ciphertext: buf.slice(slice3, slice4),\n    };\n}\nexports.deserialize = deserialize;\n//# sourceMappingURL=ecies.js.map"]},"metadata":{},"sourceType":"script"}