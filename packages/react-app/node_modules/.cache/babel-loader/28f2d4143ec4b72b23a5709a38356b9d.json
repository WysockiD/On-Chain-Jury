{"ast":null,"code":"var _jsxFileName = \"/home/dylan/scaffold-eth/packages/react-app/src/views/Subgraph.jsx\";\n\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Button, Typography, Table, Input } from \"antd\";\nimport { useQuery, gql } from '@apollo/client';\nimport { Address } from \"../components\";\nimport GraphiQL from 'graphiql';\nimport 'graphiql/graphiql.min.css';\nimport fetch from 'isomorphic-fetch';\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n\n  /*backgroundColor: \"#f9f9f9\",*/\n  padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\"\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(graphQLParams)\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const {\n    loading,\n    data\n  } = useQuery(EXAMPLE_GQL, {\n    pollInterval: 2500\n  });\n  const purposeColumns = [{\n    title: 'Purpose',\n    dataIndex: 'purpose',\n    key: 'purpose'\n  }, {\n    title: 'Sender',\n    key: 'id',\n    render: record => /*#__PURE__*/React.createElement(Address, {\n      value: record.sender.id,\n      ensProvider: props.mainnetProvider,\n      fontSize: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 27\n      }\n    })\n  }, {\n    title: 'createdAt',\n    key: 'createdAt',\n    dataIndex: 'createdAt',\n    render: d => new Date(d * 1000).toISOString()\n  }];\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n  const deployWarning = /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 8,\n      padding: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, \"Warning: ðŸ¤” Have you deployed your subgraph yet?\");\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: 780,\n      margin: \"auto\",\n      paddingBottom: 64\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: 32,\n      textAlign: 'middle'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    style: \"danger\",\n    size: \"large\",\n    onClick: () => {\n      console.log(\"newPurpose\", newPurpose);\n      /* look how you call setPurpose on your contract: */\n\n      props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, \"Set Purpose\"))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: 64\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"...\"));\n}\n\nexport default Subgraph;","map":{"version":3,"sources":["/home/dylan/scaffold-eth/packages/react-app/src/views/Subgraph.jsx"],"names":["React","useState","Button","Typography","Table","Input","useQuery","gql","Address","GraphiQL","fetch","highlight","marginLeft","marginRight","padding","borderRadius","fontWeight","Subgraph","props","graphQLFetcher","graphQLParams","subgraphUri","method","headers","body","JSON","stringify","then","response","json","EXAMPLE_GRAPHQL","EXAMPLE_GQL","loading","data","pollInterval","purposeColumns","title","dataIndex","key","render","record","sender","id","mainnetProvider","d","Date","toISOString","newPurpose","setNewPurpose","deployWarning","marginTop","width","margin","paddingBottom","textAlign","console","log","tx","writeContracts","YourContract","setPurpose"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/accessible-emoji */\n\nimport React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Button, Typography, Table, Input } from \"antd\";\nimport { useQuery, gql } from '@apollo/client';\nimport { Address } from \"../components\";\nimport GraphiQL from 'graphiql';\nimport 'graphiql/graphiql.min.css';\nimport fetch from 'isomorphic-fetch';\n\n  const highlight = { marginLeft: 4, marginRight: 8, /*backgroundColor: \"#f9f9f9\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }\n\nfunction Subgraph(props) {\n\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL)\n  const { loading, data } = useQuery(EXAMPLE_GQL,{pollInterval: 2500});\n\n  const purposeColumns = [\n    {\n      title: 'Purpose',\n      dataIndex: 'purpose',\n      key: 'purpose',\n    },\n    {\n      title: 'Sender',\n      key: 'id',\n      render: (record) => <Address\n                        value={record.sender.id}\n                        ensProvider={props.mainnetProvider}\n                        fontSize={16}\n                      />\n    },\n    {\n      title: 'createdAt',\n      key: 'createdAt',\n      dataIndex: 'createdAt',\n      render: d => (new Date(d * 1000)).toISOString()\n    },\n    ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n\n  const deployWarning = (\n    <div style={{marginTop:8,padding:8}}>{\"Warning: ðŸ¤” Have you deployed your subgraph yet?\"}</div>\n  )\n\n  return (\n      <>\n          \n          \n\n          \n\n          \n            \n          \n\n         \n\n          <div style={{width:780, margin: \"auto\", paddingBottom:64}}>\n\n            <div style={{margin:32, textAlign:'middle'}}>\n              \n          \n              <Button style={\"danger\"} size={\"large\"} onClick={()=>{\n                console.log(\"newPurpose\",newPurpose)\n                /* look how you call setPurpose on your contract: */\n                props.tx( props.writeContracts.YourContract.setPurpose(newPurpose) )\n              }}>Set Purpose</Button>\n            </div>\n\n            \n\n          </div>\n\n          <div style={{padding:64}}>\n          ...\n          </div>\n      </>\n  );\n}\n\nexport default Subgraph;\n"]},"metadata":{},"sourceType":"module"}