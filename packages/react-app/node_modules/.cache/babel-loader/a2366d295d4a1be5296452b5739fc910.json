{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { getAddress, isAddress } from \"@ethersproject/address\";\nimport { useLocalStorage } from \".\"; // resolved if(name){} to not save \"\" into cache\n\n/*\n  ~ What it does? ~\n\n  Gets ENS name from given address and provider\n\n  ~ How can I use? ~\n\n  const ensName = useLookupAddress(mainnetProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get ENS name corresponding to given address\n*/\n\nconst lookupAddress = async (provider, address) => {\n  if (isAddress(address)) {\n    //console.log(`looking up ${address}`)\n    try {\n      // Accuracy of reverse resolution is not enforced.\n      // We then manually ensure that the reported ens name resolves to address\n      const reportedName = await provider.lookupAddress(address);\n      const resolvedAddress = await provider.resolveName(reportedName);\n\n      if (getAddress(address) === getAddress(resolvedAddress)) {\n        return reportedName;\n      } else {\n        return getAddress(address);\n      }\n    } catch (e) {\n      return getAddress(address);\n    }\n  }\n\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address); //const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address); Writing directly due to sync issues\n\n  useEffect(() => {\n    let cache = window.localStorage.getItem('ensCache_' + address);\n    cache = cache && JSON.parse(cache);\n\n    if (cache && cache.timestamp > Date.now()) {\n      setEnsName(cache.name);\n    } else {\n      if (provider) {\n        lookupAddress(provider, address).then(name => {\n          if (name) {\n            setEnsName(name);\n            window.localStorage.setItem('ensCache_' + address, JSON.stringify({\n              timestamp: Date.now() + 360000,\n              name: name\n            }));\n          }\n        });\n      }\n    }\n  }, [provider, address, setEnsName]);\n  return ensName;\n};\n\nexport default useLookupAddress;","map":{"version":3,"sources":["/home/dylan/scaffold-eth/packages/react-app/src/hooks/LookupAddress.js"],"names":["useState","useEffect","getAddress","isAddress","useLocalStorage","lookupAddress","provider","address","reportedName","resolvedAddress","resolveName","e","useLookupAddress","ensName","setEnsName","cache","window","localStorage","getItem","JSON","parse","timestamp","Date","now","name","then","setItem","stringify"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,wBAAtC;AACA,SAASC,eAAT,QAAgC,GAAhC,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAG,OAAOC,QAAP,EAAiBC,OAAjB,KAA6B;AACjD,MAAGJ,SAAS,CAACI,OAAD,CAAZ,EAAuB;AACrB;AACA,QAAI;AACF;AACA;AACA,YAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACD,aAAT,CAAuBE,OAAvB,CAA3B;AAEA,YAAME,eAAe,GAAG,MAAMH,QAAQ,CAACI,WAAT,CAAqBF,YAArB,CAA9B;;AAEA,UAAIN,UAAU,CAACK,OAAD,CAAV,KAAwBL,UAAU,CAACO,eAAD,CAAtC,EAAyD;AACvD,eAAOD,YAAP;AACD,OAFD,MAEO;AACL,eAAON,UAAU,CAACK,OAAD,CAAjB;AACD;AACF,KAZD,CAYE,OAAOI,CAAP,EAAU;AACV,aAAOT,UAAU,CAACK,OAAD,CAAjB;AACD;AACF;;AACD,SAAO,CAAP;AACD,CApBD;;AAsBA,MAAMK,gBAAgB,GAAG,CAACN,QAAD,EAAWC,OAAX,KAAuB;AAC9C,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAACO,OAAD,CAAtC,CAD8C,CAE9C;;AAEAN,EAAAA,SAAS,CAAC,MAAM;AAEd,QAAIc,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAAYX,OAAxC,CAAZ;AACAQ,IAAAA,KAAK,GAAGA,KAAK,IAAII,IAAI,CAACC,KAAL,CAAWL,KAAX,CAAjB;;AAEA,QAAIA,KAAK,IAAIA,KAAK,CAACM,SAAN,GAAgBC,IAAI,CAACC,GAAL,EAA7B,EAAwC;AACtCT,MAAAA,UAAU,CAACC,KAAK,CAACS,IAAP,CAAV;AACD,KAFD,MAEK;AACH,UAAIlB,QAAJ,EAAc;AACZD,QAAAA,aAAa,CAACC,QAAD,EAAWC,OAAX,CAAb,CAAiCkB,IAAjC,CAAuCD,IAAD,IAAU;AAC9C,cAAIA,IAAJ,EAAU;AACRV,YAAAA,UAAU,CAACU,IAAD,CAAV;AACAR,YAAAA,MAAM,CAACC,YAAP,CAAoBS,OAApB,CAA4B,cAAYnB,OAAxC,EAAiDY,IAAI,CAACQ,SAAL,CAAe;AAC9DN,cAAAA,SAAS,EAACC,IAAI,CAACC,GAAL,KAAW,MADyC;AAE9DC,cAAAA,IAAI,EAACA;AAFyD,aAAf,CAAjD;AAID;AACF,SARD;AASD;AACF;AACF,GApBQ,EAoBN,CAAClB,QAAD,EAAWC,OAAX,EAAoBO,UAApB,CApBM,CAAT;AAsBA,SAAOD,OAAP;AACD,CA3BD;;AA6BA,eAAeD,gBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { getAddress, isAddress } from \"@ethersproject/address\";\nimport { useLocalStorage } from \".\"\n\n// resolved if(name){} to not save \"\" into cache\n\n/*\n  ~ What it does? ~\n\n  Gets ENS name from given address and provider\n\n  ~ How can I use? ~\n\n  const ensName = useLookupAddress(mainnetProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get ENS name corresponding to given address\n*/\n\nconst lookupAddress = async (provider, address) => {\n  if(isAddress(address)) {\n    //console.log(`looking up ${address}`)\n    try {\n      // Accuracy of reverse resolution is not enforced.\n      // We then manually ensure that the reported ens name resolves to address\n      const reportedName = await provider.lookupAddress(address);\n\n      const resolvedAddress = await provider.resolveName(reportedName);\n\n      if (getAddress(address) === getAddress(resolvedAddress)) {\n        return reportedName;\n      } else {\n        return getAddress(address)\n      }\n    } catch (e) {\n      return getAddress(address)\n    }\n  }\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n  //const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address); Writing directly due to sync issues\n\n  useEffect(() => {\n\n    let cache = window.localStorage.getItem('ensCache_'+address);\n    cache = cache && JSON.parse(cache)\n\n    if( cache && cache.timestamp>Date.now()){\n      setEnsName(cache.name)\n    }else{\n      if (provider) {\n        lookupAddress(provider, address).then((name) => {\n          if (name) {\n            setEnsName(name);\n            window.localStorage.setItem('ensCache_'+address, JSON.stringify({\n              timestamp:Date.now()+360000,\n              name:name\n            }))\n          }\n        });\n      }\n    }\n  }, [provider, address, setEnsName]);\n\n  return ensName;\n};\n\nexport default useLookupAddress;\n"]},"metadata":{},"sourceType":"module"}