{"ast":null,"code":"import { GraphQLError } from \"../../../error/GraphQLError.mjs\";\nimport { getNamedType } from \"../../../type/definition.mjs\";\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\n\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field: function Field(node) {\n      var fieldDef = context.getFieldDef();\n      var parentType = context.getParentType();\n\n      if (parentType && (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason) != null) {\n        context.reportError(new GraphQLError(\"The field \".concat(parentType.name, \".\").concat(fieldDef.name, \" is deprecated. \") + fieldDef.deprecationReason, node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n      var enumValue = context.getEnumValue();\n\n      if (type && (enumValue === null || enumValue === void 0 ? void 0 : enumValue.deprecationReason) != null) {\n        context.reportError(new GraphQLError(\"The enum value \\\"\".concat(type.name, \".\").concat(enumValue.name, \"\\\" is deprecated. \") + enumValue.deprecationReason, node));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/home/dylan/scaffold-eth/node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs"],"names":["GraphQLError","getNamedType","NoDeprecatedCustomRule","context","Field","node","fieldDef","getFieldDef","parentType","getParentType","deprecationReason","reportError","concat","name","EnumValue","type","getInputType","enumValue","getEnumValue"],"mappings":"AAAA,SAASA,YAAT,QAA6B,iCAA7B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAgCC,OAAhC,EAAyC;AAC9C,SAAO;AACLC,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;AAC1B,UAAIC,QAAQ,GAAGH,OAAO,CAACI,WAAR,EAAf;AACA,UAAIC,UAAU,GAAGL,OAAO,CAACM,aAAR,EAAjB;;AAEA,UAAID,UAAU,IAAI,CAACF,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACI,iBAA9D,KAAoF,IAAtG,EAA4G;AAC1GP,QAAAA,OAAO,CAACQ,WAAR,CAAoB,IAAIX,YAAJ,CAAiB,aAAaY,MAAb,CAAoBJ,UAAU,CAACK,IAA/B,EAAqC,GAArC,EAA0CD,MAA1C,CAAiDN,QAAQ,CAACO,IAA1D,EAAgE,kBAAhE,IAAsFP,QAAQ,CAACI,iBAAhH,EAAmIL,IAAnI,CAApB;AACD;AACF,KARI;AASLS,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBT,IAAnB,EAAyB;AAClC,UAAIU,IAAI,GAAGd,YAAY,CAACE,OAAO,CAACa,YAAR,EAAD,CAAvB;AACA,UAAIC,SAAS,GAAGd,OAAO,CAACe,YAAR,EAAhB;;AAEA,UAAIH,IAAI,IAAI,CAACE,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACP,iBAAjE,KAAuF,IAAnG,EAAyG;AACvGP,QAAAA,OAAO,CAACQ,WAAR,CAAoB,IAAIX,YAAJ,CAAiB,oBAAoBY,MAApB,CAA2BG,IAAI,CAACF,IAAhC,EAAsC,GAAtC,EAA2CD,MAA3C,CAAkDK,SAAS,CAACJ,IAA5D,EAAkE,oBAAlE,IAA0FI,SAAS,CAACP,iBAArH,EAAwIL,IAAxI,CAApB;AACD;AACF;AAhBI,GAAP;AAkBD","sourcesContent":["import { GraphQLError } from \"../../../error/GraphQLError.mjs\";\nimport { getNamedType } from \"../../../type/definition.mjs\";\n\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field: function Field(node) {\n      var fieldDef = context.getFieldDef();\n      var parentType = context.getParentType();\n\n      if (parentType && (fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason) != null) {\n        context.reportError(new GraphQLError(\"The field \".concat(parentType.name, \".\").concat(fieldDef.name, \" is deprecated. \") + fieldDef.deprecationReason, node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n      var enumValue = context.getEnumValue();\n\n      if (type && (enumValue === null || enumValue === void 0 ? void 0 : enumValue.deprecationReason) != null) {\n        context.reportError(new GraphQLError(\"The enum value \\\"\".concat(type.name, \".\").concat(enumValue.name, \"\\\" is deprecated. \") + enumValue.deprecationReason, node));\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}