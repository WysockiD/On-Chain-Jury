{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar ethAbi = require(\"ethereumjs-abi\");\n\nvar nacl = require(\"tweetnacl\");\n\nvar naclUtil = require(\"tweetnacl-util\");\n\nvar TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string'\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\nexports.TYPED_MESSAGE_SCHEMA = TYPED_MESSAGE_SCHEMA;\n/**\n * A collection of utility functions used for signing typed data\n */\n\nvar TypedDataUtils = {\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Encoded representation of an object\n   */\n  encodeData: function (primaryType, data, types, useV4) {\n    var _this = this;\n\n    if (useV4 === void 0) {\n      useV4 = true;\n    }\n\n    var encodedTypes = ['bytes32'];\n    var encodedValues = [this.hashType(primaryType, types)];\n\n    if (useV4) {\n      var encodeField_1 = function (name, type, value) {\n        if (types[type] !== undefined) {\n          // eslint-disable-next-line no-eq-null\n          return ['bytes32', value == null ? '0x0000000000000000000000000000000000000000000000000000000000000000' : ethUtil.sha3(_this.encodeData(type, value, types, useV4))];\n        }\n\n        if (value === undefined) {\n          throw new Error(\"missing value for field \" + name + \" of type \" + type);\n        }\n\n        if (type === 'bytes') {\n          return ['bytes32', ethUtil.sha3(value)];\n        }\n\n        if (type === 'string') {\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8');\n          }\n\n          return ['bytes32', ethUtil.sha3(value)];\n        }\n\n        if (type.lastIndexOf(']') === type.length - 1) {\n          var parsedType_1 = type.slice(0, type.lastIndexOf('['));\n          var typeValuePairs = value.map(function (item) {\n            return encodeField_1(name, parsedType_1, item);\n          });\n          return ['bytes32', ethUtil.sha3(ethAbi.rawEncode(typeValuePairs.map(function (_a) {\n            var t = _a[0];\n            return t;\n          }), typeValuePairs.map(function (_a) {\n            var v = _a[1];\n            return v;\n          })))];\n        }\n\n        return [type, value];\n      };\n\n      for (var _i = 0, _a = types[primaryType]; _i < _a.length; _i++) {\n        var field = _a[_i];\n\n        var _b = encodeField_1(field.name, field.type, data[field.name]),\n            type = _b[0],\n            value = _b[1];\n\n        encodedTypes.push(type);\n        encodedValues.push(value);\n      }\n    } else {\n      for (var _c = 0, _d = types[primaryType]; _c < _d.length; _c++) {\n        var field = _d[_c];\n        var value = data[field.name];\n\n        if (value !== undefined) {\n          if (field.type === 'bytes') {\n            encodedTypes.push('bytes32');\n            value = ethUtil.sha3(value);\n            encodedValues.push(value);\n          } else if (field.type === 'string') {\n            encodedTypes.push('bytes32'); // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n\n            if (typeof value === 'string') {\n              value = Buffer.from(value, 'utf8');\n            }\n\n            value = ethUtil.sha3(value);\n            encodedValues.push(value);\n          } else if (types[field.type] !== undefined) {\n            encodedTypes.push('bytes32');\n            value = ethUtil.sha3(this.encodeData(field.type, value, types, useV4));\n            encodedValues.push(value);\n          } else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n            throw new Error('Arrays currently unimplemented in encodeData');\n          } else {\n            encodedTypes.push(field.type);\n            encodedValues.push(value);\n          }\n        }\n      }\n    }\n\n    return ethAbi.rawEncode(encodedTypes, encodedValues);\n  },\n\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType: function (primaryType, types) {\n    var result = '';\n    var deps = this.findTypeDependencies(primaryType, types).filter(function (dep) {\n      return dep !== primaryType;\n    });\n    deps = [primaryType].concat(deps.sort());\n\n    for (var _i = 0, deps_1 = deps; _i < deps_1.length; _i++) {\n      var type = deps_1[_i];\n      var children = types[type];\n\n      if (!children) {\n        throw new Error(\"No type definition specified: \" + type);\n      }\n\n      result += type + \"(\" + types[type].map(function (_a) {\n        var name = _a.name,\n            t = _a.type;\n        return t + \" \" + name;\n      }).join(',') + \")\";\n    }\n\n    return result;\n  },\n\n  /**\n   * Finds all types within a type definition object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies: function (primaryType, types, results) {\n    if (results === void 0) {\n      results = [];\n    }\n\n    primaryType = primaryType.match(/^\\w*/u)[0];\n\n    if (results.includes(primaryType) || types[primaryType] === undefined) {\n      return results;\n    }\n\n    results.push(primaryType);\n\n    for (var _i = 0, _a = types[primaryType]; _i < _a.length; _i++) {\n      var field = _a[_i];\n\n      for (var _b = 0, _c = this.findTypeDependencies(field.type, types, results); _b < _c.length; _b++) {\n        var dep = _c[_b];\n        !results.includes(dep) && results.push(dep);\n      }\n    }\n\n    return results;\n  },\n\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Hash of an object\n   */\n  hashStruct: function (primaryType, data, types, useV4) {\n    if (useV4 === void 0) {\n      useV4 = true;\n    }\n\n    return ethUtil.sha3(this.encodeData(primaryType, data, types, useV4));\n  },\n\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Hash of an object\n   */\n  hashType: function (primaryType, types) {\n    return ethUtil.sha3(this.encodeType(primaryType, types));\n  },\n\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData: function (data) {\n    var sanitizedData = {};\n\n    for (var key in TYPED_MESSAGE_SCHEMA.properties) {\n      if (data[key]) {\n        sanitizedData[key] = data[key];\n      }\n    }\n\n    if ('types' in sanitizedData) {\n      sanitizedData.types = __assign({\n        EIP712Domain: []\n      }, sanitizedData.types);\n    }\n\n    return sanitizedData;\n  },\n\n  /**\n   * Signs a typed message as per EIP-712 and returns its sha3 hash\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {Buffer} - sha3 hash of the resulting signed message\n   */\n  sign: function (typedData, useV4) {\n    if (useV4 === void 0) {\n      useV4 = true;\n    }\n\n    var sanitizedData = this.sanitizeData(typedData);\n    var parts = [Buffer.from('1901', 'hex')];\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4));\n\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n      parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));\n    }\n\n    return ethUtil.sha3(Buffer.concat(parts));\n  }\n};\nexports.TypedDataUtils = TypedDataUtils;\n\nfunction concatSig(v, r, s) {\n  var rSig = ethUtil.fromSigned(r);\n  var sSig = ethUtil.fromSigned(s);\n  var vSig = ethUtil.bufferToInt(v);\n  var rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);\n  var sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);\n  var vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));\n  return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');\n}\n\nexports.concatSig = concatSig;\n\nfunction normalize(input) {\n  if (!input) {\n    return undefined;\n  }\n\n  if (typeof input === 'number') {\n    var buffer = ethUtil.toBuffer(input);\n    input = ethUtil.bufferToHex(buffer);\n  }\n\n  if (typeof input !== 'string') {\n    var msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n    msg += \" received \" + typeof input + \": \" + input;\n    throw new Error(msg);\n  }\n\n  return ethUtil.addHexPrefix(input.toLowerCase());\n}\n\nexports.normalize = normalize;\n\nfunction personalSign(privateKey, msgParams) {\n  var message = ethUtil.toBuffer(msgParams.data);\n  var msgHash = ethUtil.hashPersonalMessage(message);\n  var sig = ethUtil.ecsign(msgHash, privateKey);\n  var serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n  return serialized;\n}\n\nexports.personalSign = personalSign;\n\nfunction recoverPersonalSignature(msgParams) {\n  var publicKey = getPublicKeyFor(msgParams);\n  var sender = ethUtil.publicToAddress(publicKey);\n  var senderHex = ethUtil.bufferToHex(sender);\n  return senderHex;\n}\n\nexports.recoverPersonalSignature = recoverPersonalSignature;\n\nfunction extractPublicKey(msgParams) {\n  var publicKey = getPublicKeyFor(msgParams);\n  return \"0x\" + publicKey.toString('hex');\n}\n\nexports.extractPublicKey = extractPublicKey;\n\nfunction externalTypedSignatureHash(typedData) {\n  var hashBuffer = typedSignatureHash(typedData);\n  return ethUtil.bufferToHex(hashBuffer);\n}\n\nexports.typedSignatureHash = externalTypedSignatureHash;\n\nfunction signTypedDataLegacy(privateKey, msgParams) {\n  var msgHash = typedSignatureHash(msgParams.data);\n  var sig = ethUtil.ecsign(msgHash, privateKey);\n  return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\n\nexports.signTypedDataLegacy = signTypedDataLegacy;\n\nfunction recoverTypedSignatureLegacy(msgParams) {\n  var msgHash = typedSignatureHash(msgParams.data);\n  var publicKey = recoverPublicKey(msgHash, msgParams.sig);\n  var sender = ethUtil.publicToAddress(publicKey);\n  return ethUtil.bufferToHex(sender);\n}\n\nexports.recoverTypedSignatureLegacy = recoverTypedSignatureLegacy;\n\nfunction encrypt(receiverPublicKey, msgParams, version) {\n  switch (version) {\n    case 'x25519-xsalsa20-poly1305':\n      {\n        if (typeof msgParams.data !== 'string') {\n          throw new Error('Cannot detect secret message, message params should be of the form {data: \"secret message\"} ');\n        } // generate ephemeral keypair\n\n\n        var ephemeralKeyPair = nacl.box.keyPair(); // assemble encryption parameters - from string to UInt8\n\n        var pubKeyUInt8Array = void 0;\n\n        try {\n          pubKeyUInt8Array = naclUtil.decodeBase64(receiverPublicKey);\n        } catch (err) {\n          throw new Error('Bad public key');\n        }\n\n        var msgParamsUInt8Array = naclUtil.decodeUTF8(msgParams.data);\n        var nonce = nacl.randomBytes(nacl.box.nonceLength); // encrypt\n\n        var encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey); // handle encrypted data\n\n        var output = {\n          version: 'x25519-xsalsa20-poly1305',\n          nonce: naclUtil.encodeBase64(nonce),\n          ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),\n          ciphertext: naclUtil.encodeBase64(encryptedMessage)\n        }; // return encrypted msg data\n\n        return output;\n      }\n\n    default:\n      throw new Error('Encryption type/version not supported');\n  }\n}\n\nexports.encrypt = encrypt;\n\nfunction encryptSafely(receiverPublicKey, msgParams, version) {\n  var DEFAULT_PADDING_LENGTH = Math.pow(2, 11);\n  var NACL_EXTRA_BYTES = 16;\n  var data = msgParams.data;\n\n  if (!data) {\n    throw new Error('Cannot encrypt empty msg.data');\n  }\n\n  if (typeof data === 'object' && 'toJSON' in data) {\n    // remove toJSON attack vector\n    // TODO, check all possible children\n    throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');\n  } // add padding\n\n\n  var dataWithPadding = {\n    data: data,\n    padding: ''\n  }; // calculate padding\n\n  var dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');\n  var modVal = dataLength % DEFAULT_PADDING_LENGTH;\n  var padLength = 0; // Only pad if necessary\n\n  if (modVal > 0) {\n    padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes\n  }\n\n  dataWithPadding.padding = '0'.repeat(padLength);\n  var paddedMsgParams = {\n    data: JSON.stringify(dataWithPadding)\n  };\n  return encrypt(receiverPublicKey, paddedMsgParams, version);\n}\n\nexports.encryptSafely = encryptSafely;\n\nfunction decrypt(encryptedData, receiverPrivateKey) {\n  switch (encryptedData.version) {\n    case 'x25519-xsalsa20-poly1305':\n      {\n        // string to buffer to UInt8Array\n        var recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey);\n        var recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey; // assemble decryption parameters\n\n        var nonce = naclUtil.decodeBase64(encryptedData.nonce);\n        var ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext);\n        var ephemPublicKey = naclUtil.decodeBase64(encryptedData.ephemPublicKey); // decrypt\n\n        var decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey); // return decrypted msg data\n\n        var output = void 0;\n\n        try {\n          output = naclUtil.encodeUTF8(decryptedMessage);\n        } catch (err) {\n          throw new Error('Decryption failed.');\n        }\n\n        if (output) {\n          return output;\n        }\n\n        throw new Error('Decryption failed.');\n      }\n\n    default:\n      throw new Error('Encryption type/version not supported.');\n  }\n}\n\nexports.decrypt = decrypt;\n\nfunction decryptSafely(encryptedData, receiverPrivateKey) {\n  var dataWithPadding = JSON.parse(decrypt(encryptedData, receiverPrivateKey));\n  return dataWithPadding.data;\n}\n\nexports.decryptSafely = decryptSafely;\n\nfunction getEncryptionPublicKey(privateKey) {\n  var privateKeyUint8Array = nacl_decodeHex(privateKey);\n  var encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;\n  return naclUtil.encodeBase64(encryptionPublicKey);\n}\n\nexports.getEncryptionPublicKey = getEncryptionPublicKey;\n/**\n * A generic entry point for all typed data methods to be passed, includes a version parameter.\n */\n\nfunction signTypedMessage(privateKey, msgParams, version) {\n  if (version === void 0) {\n    version = 'V4';\n  }\n\n  switch (version) {\n    case 'V1':\n      return signTypedDataLegacy(privateKey, msgParams);\n\n    case 'V3':\n      return signTypedData(privateKey, msgParams);\n\n    case 'V4':\n    default:\n      return signTypedData_v4(privateKey, msgParams);\n  }\n}\n\nexports.signTypedMessage = signTypedMessage;\n\nfunction recoverTypedMessage(msgParams, version) {\n  if (version === void 0) {\n    version = 'V4';\n  }\n\n  switch (version) {\n    case 'V1':\n      return recoverTypedSignatureLegacy(msgParams);\n\n    case 'V3':\n      return recoverTypedSignature(msgParams);\n\n    case 'V4':\n    default:\n      return recoverTypedSignature_v4(msgParams);\n  }\n}\n\nexports.recoverTypedMessage = recoverTypedMessage;\n\nfunction signTypedData(privateKey, msgParams) {\n  var message = TypedDataUtils.sign(msgParams.data, false);\n  var sig = ethUtil.ecsign(message, privateKey);\n  return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\n\nexports.signTypedData = signTypedData;\n\nfunction signTypedData_v4(privateKey, msgParams) {\n  var message = TypedDataUtils.sign(msgParams.data);\n  var sig = ethUtil.ecsign(message, privateKey);\n  return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\n\nexports.signTypedData_v4 = signTypedData_v4;\n\nfunction recoverTypedSignature(msgParams) {\n  var message = TypedDataUtils.sign(msgParams.data, false);\n  var publicKey = recoverPublicKey(message, msgParams.sig);\n  var sender = ethUtil.publicToAddress(publicKey);\n  return ethUtil.bufferToHex(sender);\n}\n\nexports.recoverTypedSignature = recoverTypedSignature;\n\nfunction recoverTypedSignature_v4(msgParams) {\n  var message = TypedDataUtils.sign(msgParams.data);\n  var publicKey = recoverPublicKey(message, msgParams.sig);\n  var sender = ethUtil.publicToAddress(publicKey);\n  return ethUtil.bufferToHex(sender);\n}\n\nexports.recoverTypedSignature_v4 = recoverTypedSignature_v4;\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\n\nfunction typedSignatureHash(typedData) {\n  var error = new Error('Expect argument to be non-empty array');\n\n  if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n    throw error;\n  }\n\n  var data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;\n  });\n  var types = typedData.map(function (e) {\n    return e.type;\n  });\n  var schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n\n    return e.type + \" \" + e.name;\n  });\n  return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethAbi.soliditySHA3(types, data)]);\n}\n\nfunction recoverPublicKey(hash, sig) {\n  var signature = ethUtil.toBuffer(sig);\n  var sigParams = ethUtil.fromRpcSig(signature);\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);\n}\n\nfunction getPublicKeyFor(msgParams) {\n  var message = ethUtil.toBuffer(msgParams.data);\n  var msgHash = ethUtil.hashPersonalMessage(message);\n  return recoverPublicKey(msgHash, msgParams.sig);\n}\n\nfunction padWithZeroes(number, length) {\n  var myString = \"\" + number;\n\n  while (myString.length < length) {\n    myString = \"0\" + myString;\n  }\n\n  return myString;\n} // converts hex strings to the Uint8Array format used by nacl\n\n\nfunction nacl_decodeHex(msgHex) {\n  var msgBase64 = Buffer.from(msgHex, 'hex').toString('base64');\n  return naclUtil.decodeBase64(msgBase64);\n}","map":{"version":3,"sources":["/home/dylan/Desktop/JuryDapp/node_modules/burner-provider/node_modules/eth-sig-util/index.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","ethUtil","require","ethAbi","nacl","naclUtil","TYPED_MESSAGE_SCHEMA","type","properties","types","additionalProperties","items","name","required","primaryType","domain","message","TypedDataUtils","encodeData","data","useV4","_this","encodedTypes","encodedValues","hashType","encodeField_1","undefined","sha3","Error","Buffer","from","lastIndexOf","parsedType_1","slice","typeValuePairs","map","item","rawEncode","_a","v","_i","field","_b","push","_c","_d","encodeType","result","deps","findTypeDependencies","filter","dep","concat","sort","deps_1","children","join","results","match","includes","hashStruct","sanitizeData","sanitizedData","key","EIP712Domain","sign","typedData","parts","concatSig","r","rSig","fromSigned","sSig","vSig","bufferToInt","rStr","padWithZeroes","toUnsigned","toString","sStr","vStr","stripHexPrefix","intToHex","addHexPrefix","normalize","input","buffer","toBuffer","bufferToHex","msg","toLowerCase","personalSign","privateKey","msgParams","msgHash","hashPersonalMessage","sig","ecsign","serialized","recoverPersonalSignature","publicKey","getPublicKeyFor","sender","publicToAddress","senderHex","extractPublicKey","externalTypedSignatureHash","hashBuffer","typedSignatureHash","signTypedDataLegacy","recoverTypedSignatureLegacy","recoverPublicKey","encrypt","receiverPublicKey","version","ephemeralKeyPair","box","keyPair","pubKeyUInt8Array","decodeBase64","err","msgParamsUInt8Array","decodeUTF8","nonce","randomBytes","nonceLength","encryptedMessage","secretKey","output","encodeBase64","ephemPublicKey","ciphertext","encryptSafely","DEFAULT_PADDING_LENGTH","Math","pow","NACL_EXTRA_BYTES","dataWithPadding","padding","dataLength","byteLength","JSON","stringify","modVal","padLength","repeat","paddedMsgParams","decrypt","encryptedData","receiverPrivateKey","recieverPrivateKeyUint8Array","nacl_decodeHex","recieverEncryptionPrivateKey","fromSecretKey","decryptedMessage","open","encodeUTF8","decryptSafely","parse","getEncryptionPublicKey","privateKeyUint8Array","encryptionPublicKey","signTypedMessage","signTypedData","signTypedData_v4","recoverTypedMessage","recoverTypedSignature","recoverTypedSignature_v4","error","e","schema","soliditySHA3","Array","fill","hash","signature","sigParams","fromRpcSig","ecrecover","number","myString","msgHex","msgBase64"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethUtil = require(\"ethereumjs-util\");\nvar ethAbi = require(\"ethereumjs-abi\");\nvar nacl = require(\"tweetnacl\");\nvar naclUtil = require(\"tweetnacl-util\");\nvar TYPED_MESSAGE_SCHEMA = {\n    type: 'object',\n    properties: {\n        types: {\n            type: 'object',\n            additionalProperties: {\n                type: 'array',\n                items: {\n                    type: 'object',\n                    properties: {\n                        name: { type: 'string' },\n                        type: { type: 'string' },\n                    },\n                    required: ['name', 'type'],\n                },\n            },\n        },\n        primaryType: { type: 'string' },\n        domain: { type: 'object' },\n        message: { type: 'object' },\n    },\n    required: ['types', 'primaryType', 'domain', 'message'],\n};\nexports.TYPED_MESSAGE_SCHEMA = TYPED_MESSAGE_SCHEMA;\n/**\n * A collection of utility functions used for signing typed data\n */\nvar TypedDataUtils = {\n    /**\n     * Encodes an object by encoding and concatenating each of its members\n     *\n     * @param {string} primaryType - Root type\n     * @param {Object} data - Object to encode\n     * @param {Object} types - Type definitions\n     * @returns {Buffer} - Encoded representation of an object\n     */\n    encodeData: function (primaryType, data, types, useV4) {\n        var _this = this;\n        if (useV4 === void 0) { useV4 = true; }\n        var encodedTypes = ['bytes32'];\n        var encodedValues = [this.hashType(primaryType, types)];\n        if (useV4) {\n            var encodeField_1 = function (name, type, value) {\n                if (types[type] !== undefined) {\n                    // eslint-disable-next-line no-eq-null\n                    return ['bytes32', value == null ?\n                            '0x0000000000000000000000000000000000000000000000000000000000000000' :\n                            ethUtil.sha3(_this.encodeData(type, value, types, useV4))];\n                }\n                if (value === undefined) {\n                    throw new Error(\"missing value for field \" + name + \" of type \" + type);\n                }\n                if (type === 'bytes') {\n                    return ['bytes32', ethUtil.sha3(value)];\n                }\n                if (type === 'string') {\n                    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n                    if (typeof value === 'string') {\n                        value = Buffer.from(value, 'utf8');\n                    }\n                    return ['bytes32', ethUtil.sha3(value)];\n                }\n                if (type.lastIndexOf(']') === type.length - 1) {\n                    var parsedType_1 = type.slice(0, type.lastIndexOf('['));\n                    var typeValuePairs = value.map(function (item) { return encodeField_1(name, parsedType_1, item); });\n                    return ['bytes32', ethUtil.sha3(ethAbi.rawEncode(typeValuePairs.map(function (_a) {\n                            var t = _a[0];\n                            return t;\n                        }), typeValuePairs.map(function (_a) {\n                            var v = _a[1];\n                            return v;\n                        })))];\n                }\n                return [type, value];\n            };\n            for (var _i = 0, _a = types[primaryType]; _i < _a.length; _i++) {\n                var field = _a[_i];\n                var _b = encodeField_1(field.name, field.type, data[field.name]), type = _b[0], value = _b[1];\n                encodedTypes.push(type);\n                encodedValues.push(value);\n            }\n        }\n        else {\n            for (var _c = 0, _d = types[primaryType]; _c < _d.length; _c++) {\n                var field = _d[_c];\n                var value = data[field.name];\n                if (value !== undefined) {\n                    if (field.type === 'bytes') {\n                        encodedTypes.push('bytes32');\n                        value = ethUtil.sha3(value);\n                        encodedValues.push(value);\n                    }\n                    else if (field.type === 'string') {\n                        encodedTypes.push('bytes32');\n                        // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n                        if (typeof value === 'string') {\n                            value = Buffer.from(value, 'utf8');\n                        }\n                        value = ethUtil.sha3(value);\n                        encodedValues.push(value);\n                    }\n                    else if (types[field.type] !== undefined) {\n                        encodedTypes.push('bytes32');\n                        value = ethUtil.sha3(this.encodeData(field.type, value, types, useV4));\n                        encodedValues.push(value);\n                    }\n                    else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n                        throw new Error('Arrays currently unimplemented in encodeData');\n                    }\n                    else {\n                        encodedTypes.push(field.type);\n                        encodedValues.push(value);\n                    }\n                }\n            }\n        }\n        return ethAbi.rawEncode(encodedTypes, encodedValues);\n    },\n    /**\n     * Encodes the type of an object by encoding a comma delimited list of its members\n     *\n     * @param {string} primaryType - Root type to encode\n     * @param {Object} types - Type definitions\n     * @returns {string} - Encoded representation of the type of an object\n     */\n    encodeType: function (primaryType, types) {\n        var result = '';\n        var deps = this.findTypeDependencies(primaryType, types).filter(function (dep) { return dep !== primaryType; });\n        deps = [primaryType].concat(deps.sort());\n        for (var _i = 0, deps_1 = deps; _i < deps_1.length; _i++) {\n            var type = deps_1[_i];\n            var children = types[type];\n            if (!children) {\n                throw new Error(\"No type definition specified: \" + type);\n            }\n            result += type + \"(\" + types[type].map(function (_a) {\n                var name = _a.name, t = _a.type;\n                return t + \" \" + name;\n            }).join(',') + \")\";\n        }\n        return result;\n    },\n    /**\n     * Finds all types within a type definition object\n     *\n     * @param {string} primaryType - Root type\n     * @param {Object} types - Type definitions\n     * @param {Array} results - current set of accumulated types\n     * @returns {Array} - Set of all types found in the type definition\n     */\n    findTypeDependencies: function (primaryType, types, results) {\n        if (results === void 0) { results = []; }\n        primaryType = primaryType.match(/^\\w*/u)[0];\n        if (results.includes(primaryType) || types[primaryType] === undefined) {\n            return results;\n        }\n        results.push(primaryType);\n        for (var _i = 0, _a = types[primaryType]; _i < _a.length; _i++) {\n            var field = _a[_i];\n            for (var _b = 0, _c = this.findTypeDependencies(field.type, types, results); _b < _c.length; _b++) {\n                var dep = _c[_b];\n                !results.includes(dep) && results.push(dep);\n            }\n        }\n        return results;\n    },\n    /**\n     * Hashes an object\n     *\n     * @param {string} primaryType - Root type\n     * @param {Object} data - Object to hash\n     * @param {Object} types - Type definitions\n     * @returns {Buffer} - Hash of an object\n     */\n    hashStruct: function (primaryType, data, types, useV4) {\n        if (useV4 === void 0) { useV4 = true; }\n        return ethUtil.sha3(this.encodeData(primaryType, data, types, useV4));\n    },\n    /**\n     * Hashes the type of an object\n     *\n     * @param {string} primaryType - Root type to hash\n     * @param {Object} types - Type definitions\n     * @returns {Buffer} - Hash of an object\n     */\n    hashType: function (primaryType, types) {\n        return ethUtil.sha3(this.encodeType(primaryType, types));\n    },\n    /**\n     * Removes properties from a message object that are not defined per EIP-712\n     *\n     * @param {Object} data - typed message object\n     * @returns {Object} - typed message object with only allowed fields\n     */\n    sanitizeData: function (data) {\n        var sanitizedData = {};\n        for (var key in TYPED_MESSAGE_SCHEMA.properties) {\n            if (data[key]) {\n                sanitizedData[key] = data[key];\n            }\n        }\n        if ('types' in sanitizedData) {\n            sanitizedData.types = __assign({ EIP712Domain: [] }, sanitizedData.types);\n        }\n        return sanitizedData;\n    },\n    /**\n     * Signs a typed message as per EIP-712 and returns its sha3 hash\n     *\n     * @param {Object} typedData - Types message data to sign\n     * @returns {Buffer} - sha3 hash of the resulting signed message\n     */\n    sign: function (typedData, useV4) {\n        if (useV4 === void 0) { useV4 = true; }\n        var sanitizedData = this.sanitizeData(typedData);\n        var parts = [Buffer.from('1901', 'hex')];\n        parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4));\n        if (sanitizedData.primaryType !== 'EIP712Domain') {\n            parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));\n        }\n        return ethUtil.sha3(Buffer.concat(parts));\n    },\n};\nexports.TypedDataUtils = TypedDataUtils;\nfunction concatSig(v, r, s) {\n    var rSig = ethUtil.fromSigned(r);\n    var sSig = ethUtil.fromSigned(s);\n    var vSig = ethUtil.bufferToInt(v);\n    var rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);\n    var sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);\n    var vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');\n}\nexports.concatSig = concatSig;\nfunction normalize(input) {\n    if (!input) {\n        return undefined;\n    }\n    if (typeof input === 'number') {\n        var buffer = ethUtil.toBuffer(input);\n        input = ethUtil.bufferToHex(buffer);\n    }\n    if (typeof input !== 'string') {\n        var msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n        msg += \" received \" + typeof input + \": \" + input;\n        throw new Error(msg);\n    }\n    return ethUtil.addHexPrefix(input.toLowerCase());\n}\nexports.normalize = normalize;\nfunction personalSign(privateKey, msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data);\n    var msgHash = ethUtil.hashPersonalMessage(message);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    var serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n    return serialized;\n}\nexports.personalSign = personalSign;\nfunction recoverPersonalSignature(msgParams) {\n    var publicKey = getPublicKeyFor(msgParams);\n    var sender = ethUtil.publicToAddress(publicKey);\n    var senderHex = ethUtil.bufferToHex(sender);\n    return senderHex;\n}\nexports.recoverPersonalSignature = recoverPersonalSignature;\nfunction extractPublicKey(msgParams) {\n    var publicKey = getPublicKeyFor(msgParams);\n    return \"0x\" + publicKey.toString('hex');\n}\nexports.extractPublicKey = extractPublicKey;\nfunction externalTypedSignatureHash(typedData) {\n    var hashBuffer = typedSignatureHash(typedData);\n    return ethUtil.bufferToHex(hashBuffer);\n}\nexports.typedSignatureHash = externalTypedSignatureHash;\nfunction signTypedDataLegacy(privateKey, msgParams) {\n    var msgHash = typedSignatureHash(msgParams.data);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\nexports.signTypedDataLegacy = signTypedDataLegacy;\nfunction recoverTypedSignatureLegacy(msgParams) {\n    var msgHash = typedSignatureHash(msgParams.data);\n    var publicKey = recoverPublicKey(msgHash, msgParams.sig);\n    var sender = ethUtil.publicToAddress(publicKey);\n    return ethUtil.bufferToHex(sender);\n}\nexports.recoverTypedSignatureLegacy = recoverTypedSignatureLegacy;\nfunction encrypt(receiverPublicKey, msgParams, version) {\n    switch (version) {\n        case 'x25519-xsalsa20-poly1305': {\n            if (typeof msgParams.data !== 'string') {\n                throw new Error('Cannot detect secret message, message params should be of the form {data: \"secret message\"} ');\n            }\n            // generate ephemeral keypair\n            var ephemeralKeyPair = nacl.box.keyPair();\n            // assemble encryption parameters - from string to UInt8\n            var pubKeyUInt8Array = void 0;\n            try {\n                pubKeyUInt8Array = naclUtil.decodeBase64(receiverPublicKey);\n            }\n            catch (err) {\n                throw new Error('Bad public key');\n            }\n            var msgParamsUInt8Array = naclUtil.decodeUTF8(msgParams.data);\n            var nonce = nacl.randomBytes(nacl.box.nonceLength);\n            // encrypt\n            var encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);\n            // handle encrypted data\n            var output = {\n                version: 'x25519-xsalsa20-poly1305',\n                nonce: naclUtil.encodeBase64(nonce),\n                ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),\n                ciphertext: naclUtil.encodeBase64(encryptedMessage),\n            };\n            // return encrypted msg data\n            return output;\n        }\n        default:\n            throw new Error('Encryption type/version not supported');\n    }\n}\nexports.encrypt = encrypt;\nfunction encryptSafely(receiverPublicKey, msgParams, version) {\n    var DEFAULT_PADDING_LENGTH = Math.pow(2, 11);\n    var NACL_EXTRA_BYTES = 16;\n    var data = msgParams.data;\n    if (!data) {\n        throw new Error('Cannot encrypt empty msg.data');\n    }\n    if (typeof data === 'object' && 'toJSON' in data) {\n        // remove toJSON attack vector\n        // TODO, check all possible children\n        throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');\n    }\n    // add padding\n    var dataWithPadding = {\n        data: data,\n        padding: '',\n    };\n    // calculate padding\n    var dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');\n    var modVal = dataLength % DEFAULT_PADDING_LENGTH;\n    var padLength = 0;\n    // Only pad if necessary\n    if (modVal > 0) {\n        padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes\n    }\n    dataWithPadding.padding = '0'.repeat(padLength);\n    var paddedMsgParams = { data: JSON.stringify(dataWithPadding) };\n    return encrypt(receiverPublicKey, paddedMsgParams, version);\n}\nexports.encryptSafely = encryptSafely;\nfunction decrypt(encryptedData, receiverPrivateKey) {\n    switch (encryptedData.version) {\n        case 'x25519-xsalsa20-poly1305': {\n            // string to buffer to UInt8Array\n            var recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey);\n            var recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey;\n            // assemble decryption parameters\n            var nonce = naclUtil.decodeBase64(encryptedData.nonce);\n            var ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext);\n            var ephemPublicKey = naclUtil.decodeBase64(encryptedData.ephemPublicKey);\n            // decrypt\n            var decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey);\n            // return decrypted msg data\n            var output = void 0;\n            try {\n                output = naclUtil.encodeUTF8(decryptedMessage);\n            }\n            catch (err) {\n                throw new Error('Decryption failed.');\n            }\n            if (output) {\n                return output;\n            }\n            throw new Error('Decryption failed.');\n        }\n        default:\n            throw new Error('Encryption type/version not supported.');\n    }\n}\nexports.decrypt = decrypt;\nfunction decryptSafely(encryptedData, receiverPrivateKey) {\n    var dataWithPadding = JSON.parse(decrypt(encryptedData, receiverPrivateKey));\n    return dataWithPadding.data;\n}\nexports.decryptSafely = decryptSafely;\nfunction getEncryptionPublicKey(privateKey) {\n    var privateKeyUint8Array = nacl_decodeHex(privateKey);\n    var encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;\n    return naclUtil.encodeBase64(encryptionPublicKey);\n}\nexports.getEncryptionPublicKey = getEncryptionPublicKey;\n/**\n * A generic entry point for all typed data methods to be passed, includes a version parameter.\n */\nfunction signTypedMessage(privateKey, msgParams, version) {\n    if (version === void 0) { version = 'V4'; }\n    switch (version) {\n        case 'V1':\n            return signTypedDataLegacy(privateKey, msgParams);\n        case 'V3':\n            return signTypedData(privateKey, msgParams);\n        case 'V4':\n        default:\n            return signTypedData_v4(privateKey, msgParams);\n    }\n}\nexports.signTypedMessage = signTypedMessage;\nfunction recoverTypedMessage(msgParams, version) {\n    if (version === void 0) { version = 'V4'; }\n    switch (version) {\n        case 'V1':\n            return recoverTypedSignatureLegacy(msgParams);\n        case 'V3':\n            return recoverTypedSignature(msgParams);\n        case 'V4':\n        default:\n            return recoverTypedSignature_v4(msgParams);\n    }\n}\nexports.recoverTypedMessage = recoverTypedMessage;\nfunction signTypedData(privateKey, msgParams) {\n    var message = TypedDataUtils.sign(msgParams.data, false);\n    var sig = ethUtil.ecsign(message, privateKey);\n    return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\nexports.signTypedData = signTypedData;\nfunction signTypedData_v4(privateKey, msgParams) {\n    var message = TypedDataUtils.sign(msgParams.data);\n    var sig = ethUtil.ecsign(message, privateKey);\n    return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\nexports.signTypedData_v4 = signTypedData_v4;\nfunction recoverTypedSignature(msgParams) {\n    var message = TypedDataUtils.sign(msgParams.data, false);\n    var publicKey = recoverPublicKey(message, msgParams.sig);\n    var sender = ethUtil.publicToAddress(publicKey);\n    return ethUtil.bufferToHex(sender);\n}\nexports.recoverTypedSignature = recoverTypedSignature;\nfunction recoverTypedSignature_v4(msgParams) {\n    var message = TypedDataUtils.sign(msgParams.data);\n    var publicKey = recoverPublicKey(message, msgParams.sig);\n    var sender = ethUtil.publicToAddress(publicKey);\n    return ethUtil.bufferToHex(sender);\n}\nexports.recoverTypedSignature_v4 = recoverTypedSignature_v4;\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHash(typedData) {\n    var error = new Error('Expect argument to be non-empty array');\n    if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n        throw error;\n    }\n    var data = typedData.map(function (e) {\n        return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;\n    });\n    var types = typedData.map(function (e) {\n        return e.type;\n    });\n    var schema = typedData.map(function (e) {\n        if (!e.name) {\n            throw error;\n        }\n        return e.type + \" \" + e.name;\n    });\n    return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [\n        ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n        ethAbi.soliditySHA3(types, data),\n    ]);\n}\nfunction recoverPublicKey(hash, sig) {\n    var signature = ethUtil.toBuffer(sig);\n    var sigParams = ethUtil.fromRpcSig(signature);\n    return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);\n}\nfunction getPublicKeyFor(msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data);\n    var msgHash = ethUtil.hashPersonalMessage(message);\n    return recoverPublicKey(msgHash, msgParams.sig);\n}\nfunction padWithZeroes(number, length) {\n    var myString = \"\" + number;\n    while (myString.length < length) {\n        myString = \"0\" + myString;\n    }\n    return myString;\n}\n// converts hex strings to the Uint8Array format used by nacl\nfunction nacl_decodeHex(msgHex) {\n    var msgBase64 = Buffer.from(msgHex, 'hex').toString('base64');\n    return naclUtil.decodeBase64(msgBase64);\n}\n"]},"metadata":{},"sourceType":"script"}