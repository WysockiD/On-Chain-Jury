{"ast":null,"code":"import { parse, typeFromAST } from 'graphql';\nexport default function getQueryFacts(schema, documentStr) {\n  if (!documentStr) {\n    return;\n  }\n\n  var documentAST;\n\n  try {\n    documentAST = parse(documentStr);\n  } catch (_a) {\n    return;\n  }\n\n  var variableToType = schema ? collectVariables(schema, documentAST) : undefined;\n  var operations = [];\n  documentAST.definitions.forEach(function (def) {\n    if (def.kind === 'OperationDefinition') {\n      operations.push(def);\n    }\n  });\n  return {\n    variableToType: variableToType,\n    operations: operations\n  };\n}\nexport function collectVariables(schema, documentAST) {\n  var variableToType = Object.create(null);\n  documentAST.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      var variableDefinitions = definition.variableDefinitions;\n\n      if (variableDefinitions) {\n        variableDefinitions.forEach(function (_a) {\n          var variable = _a.variable,\n              type = _a.type;\n          var inputType = typeFromAST(schema, type);\n\n          if (inputType) {\n            variableToType[variable.name.value] = inputType;\n          }\n        });\n      }\n    }\n  });\n  return variableToType;\n}","map":{"version":3,"sources":["../../src/utility/getQueryFacts.ts"],"names":[],"mappings":"AAOA,SACE,KADF,EAEE,WAFF,QAQO,SARP;AAyBA,eAAc,SAAU,aAAV,CACZ,MADY,EAEZ,WAFY,EAEe;AAE3B,MAAI,CAAC,WAAL,EAAkB;AAChB;AACD;;AAED,MAAI,WAAJ;;AACA,MAAI;AACF,IAAA,WAAW,GAAG,KAAK,CAAC,WAAD,CAAnB;AACD,GAFD,CAEE,OAAA,EAAA,EAAM;AACN;AACD;;AAED,MAAM,cAAc,GAAG,MAAM,GACzB,gBAAgB,CAAC,MAAD,EAAS,WAAT,CADS,GAEzB,SAFJ;AAKA,MAAM,UAAU,GAA8B,EAA9C;AACA,EAAA,WAAW,CAAC,WAAZ,CAAwB,OAAxB,CAAgC,UAAA,GAAA,EAAG;AACjC,QAAI,GAAG,CAAC,IAAJ,KAAa,qBAAjB,EAAwC;AACtC,MAAA,UAAU,CAAC,IAAX,CAAgB,GAAhB;AACD;AACF,GAJD;AAMA,SAAO;AAAE,IAAA,cAAc,EAAA,cAAhB;AAAkB,IAAA,UAAU,EAAA;AAA5B,GAAP;AACD;AAKD,OAAM,SAAU,gBAAV,CACJ,MADI,EAEJ,WAFI,EAEqB;AAEzB,MAAM,cAAc,GAEhB,MAAM,CAAC,MAAP,CAAc,IAAd,CAFJ;AAGA,EAAA,WAAW,CAAC,WAAZ,CAAwB,OAAxB,CAAgC,UAAA,UAAA,EAAU;AACxC,QAAI,UAAU,CAAC,IAAX,KAAoB,qBAAxB,EAA+C;AAC7C,UAAM,mBAAmB,GAAG,UAAU,CAAC,mBAAvC;;AACA,UAAI,mBAAJ,EAAyB;AACvB,QAAA,mBAAmB,CAAC,OAApB,CAA4B,UAAC,EAAD,EAAmB;cAAhB,QAAQ,GAAA,EAAA,CAAA,Q;cAAE,IAAI,GAAA,EAAA,CAAA,I;AAC3C,cAAM,SAAS,GAAG,WAAW,CAAC,MAAD,EAAS,IAAT,CAA7B;;AACA,cAAI,SAAJ,EAAe;AACb,YAAA,cAAc,CAAC,QAAQ,CAAC,IAAT,CAAc,KAAf,CAAd,GAAsC,SAAtC;AACD;AACF,SALD;AAMD;AACF;AACF,GAZD;AAaA,SAAO,cAAP;AACD","sourceRoot":"","sourcesContent":["import { parse, typeFromAST, } from 'graphql';\nexport default function getQueryFacts(schema, documentStr) {\n    if (!documentStr) {\n        return;\n    }\n    var documentAST;\n    try {\n        documentAST = parse(documentStr);\n    }\n    catch (_a) {\n        return;\n    }\n    var variableToType = schema\n        ? collectVariables(schema, documentAST)\n        : undefined;\n    var operations = [];\n    documentAST.definitions.forEach(function (def) {\n        if (def.kind === 'OperationDefinition') {\n            operations.push(def);\n        }\n    });\n    return { variableToType: variableToType, operations: operations };\n}\nexport function collectVariables(schema, documentAST) {\n    var variableToType = Object.create(null);\n    documentAST.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            var variableDefinitions = definition.variableDefinitions;\n            if (variableDefinitions) {\n                variableDefinitions.forEach(function (_a) {\n                    var variable = _a.variable, type = _a.type;\n                    var inputType = typeFromAST(schema, type);\n                    if (inputType) {\n                        variableToType[variable.name.value] = inputType;\n                    }\n                });\n            }\n        }\n    });\n    return variableToType;\n}\n//# sourceMappingURL=getQueryFacts.js.map"]},"metadata":{},"sourceType":"module"}