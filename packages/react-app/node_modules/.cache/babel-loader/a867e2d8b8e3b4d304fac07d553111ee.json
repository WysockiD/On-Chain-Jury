{"ast":null,"code":"import { equal } from \"@wry/equality\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\n\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n  var original = cache[methodName];\n\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nvar QueryInfo = function () {\n  function QueryInfo(cache) {\n    this.cache = cache;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.subscriptions = new Set();\n    this.dirty = false;\n    this.diff = null;\n    this.observableQuery = null;\n\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus = query.networkStatus || NetworkStatus.loading;\n\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.diff = null;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.getDiff = function (variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    if (this.diff && equal(variables, this.variables)) {\n      return this.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n    return this.diff = this.cache.diff({\n      query: this.document,\n      variables: variables,\n      returnPartialData: true,\n      optimistic: true\n    });\n  };\n\n  QueryInfo.prototype.setDiff = function (diff) {\n    var _this = this;\n\n    var oldDiff = this.diff;\n    this.diff = diff;\n\n    if (!this.dirty && (diff && diff.result) !== (oldDiff && oldDiff.result)) {\n      this.dirty = true;\n\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n  };\n\n  QueryInfo.prototype.setObservableQuery = function (oq) {\n    var _this = this;\n\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    this.observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = function () {\n        if (_this.getDiff().fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          oq.reobserve();\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  };\n\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n\n    if (this.notifyTimeout) {\n      clearTimeout(this.notifyTimeout);\n      this.notifyTimeout = void 0;\n    }\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      var fetchPolicy = this.observableQuery.options.fetchPolicy;\n\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  QueryInfo.prototype.stop = function () {\n    this.cancel();\n    delete this.cancel;\n    var oq = this.observableQuery;\n    if (oq) oq.stopPolling();\n  };\n\n  QueryInfo.prototype.cancel = function () {};\n\n  QueryInfo.prototype.updateWatch = function (variables) {\n    var _this = this;\n\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    var oq = this.observableQuery;\n\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    if (!this.lastWatch || this.lastWatch.query !== this.document || !equal(variables, this.lastWatch.variables)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = {\n        query: this.document,\n        variables: variables,\n        optimistic: true,\n        callback: function (diff) {\n          return _this.setDiff(diff);\n        }\n      });\n    }\n  };\n\n  QueryInfo.prototype.shouldWrite = function (result, variables) {\n    var lastWrite = this.lastWrite;\n    return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && equal(variables, lastWrite.variables) && equal(result.data, lastWrite.result.data));\n  };\n\n  QueryInfo.prototype.markResult = function (result, options, allowCacheWrite) {\n    var _this = this;\n\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.diff = {\n        result: result.data,\n        complete: true\n      };\n    } else if (allowCacheWrite) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        this.cache.performTransaction(function (cache) {\n          if (_this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: _this.document,\n              data: result.data,\n              variables: options.variables\n            });\n            _this.lastWrite = {\n              result: result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(_this.cache)\n            };\n          } else {\n            if (_this.diff && _this.diff.complete) {\n              result.data = _this.diff.result;\n              return;\n            }\n          }\n\n          var diff = cache.diff({\n            query: _this.document,\n            variables: options.variables,\n            returnPartialData: true,\n            optimistic: true\n          });\n\n          _this.updateWatch(options.variables);\n\n          _this.diff = diff;\n\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  };\n\n  QueryInfo.prototype.markReady = function () {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  };\n\n  QueryInfo.prototype.markError = function (error) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  };\n\n  return QueryInfo;\n}();\n\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n  if (errorPolicy === void 0) {\n    errorPolicy = \"none\";\n  }\n\n  var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  var writeWithErrors = !graphQLResultHasError(result);\n\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n\n  return writeWithErrors;\n}","map":{"version":3,"sources":["../../src/core/QueryInfo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { equal } from \"@wry/equality\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap, } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight, } from \"./networkStatus.js\";\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        cache[methodName] = function () {\n            destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            return original.apply(this, arguments);\n        };\n    }\n}\nvar QueryInfo = (function () {\n    function QueryInfo(cache) {\n        this.cache = cache;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.subscriptions = new Set();\n        this.dirty = false;\n        this.diff = null;\n        this.observableQuery = null;\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function (query) {\n        var networkStatus = query.networkStatus || NetworkStatus.loading;\n        if (this.variables &&\n            this.networkStatus !== NetworkStatus.loading &&\n            !equal(this.variables, query.variables)) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        if (!equal(query.variables, this.variables)) {\n            this.diff = null;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus,\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.getDiff = function (variables) {\n        if (variables === void 0) { variables = this.variables; }\n        if (this.diff && equal(variables, this.variables)) {\n            return this.diff;\n        }\n        this.updateWatch(this.variables = variables);\n        return this.diff = this.cache.diff({\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n        });\n    };\n    QueryInfo.prototype.setDiff = function (diff) {\n        var _this = this;\n        var oldDiff = this.diff;\n        this.diff = diff;\n        if (!this.dirty &&\n            (diff && diff.result) !== (oldDiff && oldDiff.result)) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);\n            }\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function (oq) {\n        var _this = this;\n        if (oq === this.observableQuery)\n            return;\n        if (this.oqListener) {\n            this.listeners.delete(this.oqListener);\n        }\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n            this.listeners.add(this.oqListener = function () {\n                if (_this.getDiff().fromOptimisticTransaction) {\n                    oq[\"observe\"]();\n                }\n                else {\n                    oq.reobserve();\n                }\n            });\n        }\n        else {\n            delete this.oqListener;\n        }\n    };\n    QueryInfo.prototype.notify = function () {\n        var _this = this;\n        if (this.notifyTimeout) {\n            clearTimeout(this.notifyTimeout);\n            this.notifyTimeout = void 0;\n        }\n        if (this.shouldNotify()) {\n            this.listeners.forEach(function (listener) { return listener(_this); });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function () {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if (isNetworkRequestInFlight(this.networkStatus) &&\n            this.observableQuery) {\n            var fetchPolicy = this.observableQuery.options.fetchPolicy;\n            if (fetchPolicy !== \"cache-only\" &&\n                fetchPolicy !== \"cache-and-network\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function () {\n        this.cancel();\n        delete this.cancel;\n        var oq = this.observableQuery;\n        if (oq)\n            oq.stopPolling();\n    };\n    QueryInfo.prototype.cancel = function () { };\n    QueryInfo.prototype.updateWatch = function (variables) {\n        var _this = this;\n        if (variables === void 0) { variables = this.variables; }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        if (!this.lastWatch ||\n            this.lastWatch.query !== this.document ||\n            !equal(variables, this.lastWatch.variables)) {\n            this.cancel();\n            this.cancel = this.cache.watch(this.lastWatch = {\n                query: this.document,\n                variables: variables,\n                optimistic: true,\n                callback: function (diff) { return _this.setDiff(diff); },\n            });\n        }\n    };\n    QueryInfo.prototype.shouldWrite = function (result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite &&\n            lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n            equal(variables, lastWrite.variables) &&\n            equal(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function (result, options, allowCacheWrite) {\n        var _this = this;\n        this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n        if (options.fetchPolicy === 'no-cache') {\n            this.diff = { result: result.data, complete: true };\n        }\n        else if (allowCacheWrite) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                this.cache.performTransaction(function (cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: _this.document,\n                            data: result.data,\n                            variables: options.variables,\n                        });\n                        _this.lastWrite = {\n                            result: result,\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache),\n                        };\n                    }\n                    else {\n                        if (_this.diff && _this.diff.complete) {\n                            result.data = _this.diff.result;\n                            return;\n                        }\n                    }\n                    var diff = cache.diff({\n                        query: _this.document,\n                        variables: options.variables,\n                        returnPartialData: true,\n                        optimistic: true,\n                    });\n                    _this.updateWatch(options.variables);\n                    _this.diff = diff;\n                    if (diff.complete) {\n                        result.data = diff.result;\n                    }\n                });\n            }\n            else {\n                this.lastWrite = void 0;\n            }\n        }\n    };\n    QueryInfo.prototype.markReady = function () {\n        this.networkError = null;\n        return this.networkStatus = NetworkStatus.ready;\n    };\n    QueryInfo.prototype.markError = function (error) {\n        this.networkStatus = NetworkStatus.error;\n        this.lastWrite = void 0;\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}());\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) { errorPolicy = \"none\"; }\n    var ignoreErrors = errorPolicy === \"ignore\" ||\n        errorPolicy === \"all\";\n    var writeWithErrors = !graphQLResultHasError(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n}\n//# sourceMappingURL=QueryInfo.js.map"]},"metadata":{},"sourceType":"module"}