{"ast":null,"code":"\"use strict\";\n\nvar _codemirror = _interopRequireDefault(require(\"codemirror\"));\n\nvar _graphqlLanguageServiceInterface = require(\"graphql-language-service-interface\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n *  Copyright (c) 2020 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n\nconst SEVERITY = ['error', 'warning', 'information', 'hint'];\nconst TYPE = {\n  'GraphQL: Validation': 'validation',\n  'GraphQL: Deprecation': 'deprecation',\n  'GraphQL: Syntax': 'syntax'\n};\n/**\n * Registers a \"lint\" helper for CodeMirror.\n *\n * Using CodeMirror's \"lint\" addon: https://codemirror.net/demo/lint.html\n * Given the text within an editor, this helper will take that text and return\n * a list of linter issues, derived from GraphQL's parse and validate steps.\n * Also, this uses `graphql-language-service-parser` to power the diagnostics\n * service.\n *\n * Options:\n *\n *   - schema: GraphQLSchema provides the linter with positionally relevant info\n *\n */\n\n_codemirror.default.registerHelper('lint', 'graphql', (text, options) => {\n  const schema = options.schema;\n  const rawResults = (0, _graphqlLanguageServiceInterface.getDiagnostics)(text, schema);\n  const results = rawResults.map(error => ({\n    message: error.message,\n    severity: SEVERITY[error.severity - 1],\n    type: TYPE[error.source],\n    from: _codemirror.default.Pos(error.range.start.line, error.range.start.character),\n    to: _codemirror.default.Pos(error.range.end.line, error.range.end.character)\n  }));\n  return results;\n});","map":{"version":3,"sources":["/home/dylan/scaffold-eth/node_modules/codemirror-graphql/lint.js"],"names":["_codemirror","_interopRequireDefault","require","_graphqlLanguageServiceInterface","obj","__esModule","default","SEVERITY","TYPE","registerHelper","text","options","schema","rawResults","getDiagnostics","results","map","error","message","severity","type","source","from","Pos","range","start","line","character","to","end"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAxC;;AAEA,IAAIC,gCAAgC,GAAGD,OAAO,CAAC,oCAAD,CAA9C;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,QAAQ,GAAG,CAAC,OAAD,EAAU,SAAV,EAAqB,aAArB,EAAoC,MAApC,CAAjB;AACA,MAAMC,IAAI,GAAG;AACX,yBAAuB,YADZ;AAEX,0BAAwB,aAFb;AAGX,qBAAmB;AAHR,CAAb;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAR,WAAW,CAACM,OAAZ,CAAoBG,cAApB,CAAmC,MAAnC,EAA2C,SAA3C,EAAsD,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACvE,QAAMC,MAAM,GAAGD,OAAO,CAACC,MAAvB;AACA,QAAMC,UAAU,GAAG,CAAC,GAAGV,gCAAgC,CAACW,cAArC,EAAqDJ,IAArD,EAA2DE,MAA3D,CAAnB;AACA,QAAMG,OAAO,GAAGF,UAAU,CAACG,GAAX,CAAeC,KAAK,KAAK;AACvCC,IAAAA,OAAO,EAAED,KAAK,CAACC,OADwB;AAEvCC,IAAAA,QAAQ,EAAEZ,QAAQ,CAACU,KAAK,CAACE,QAAN,GAAiB,CAAlB,CAFqB;AAGvCC,IAAAA,IAAI,EAAEZ,IAAI,CAACS,KAAK,CAACI,MAAP,CAH6B;AAIvCC,IAAAA,IAAI,EAAEtB,WAAW,CAACM,OAAZ,CAAoBiB,GAApB,CAAwBN,KAAK,CAACO,KAAN,CAAYC,KAAZ,CAAkBC,IAA1C,EAAgDT,KAAK,CAACO,KAAN,CAAYC,KAAZ,CAAkBE,SAAlE,CAJiC;AAKvCC,IAAAA,EAAE,EAAE5B,WAAW,CAACM,OAAZ,CAAoBiB,GAApB,CAAwBN,KAAK,CAACO,KAAN,CAAYK,GAAZ,CAAgBH,IAAxC,EAA8CT,KAAK,CAACO,KAAN,CAAYK,GAAZ,CAAgBF,SAA9D;AALmC,GAAL,CAApB,CAAhB;AAOA,SAAOZ,OAAP;AACD,CAXD","sourcesContent":["\"use strict\";\n\nvar _codemirror = _interopRequireDefault(require(\"codemirror\"));\n\nvar _graphqlLanguageServiceInterface = require(\"graphql-language-service-interface\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *  Copyright (c) 2020 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\nconst SEVERITY = ['error', 'warning', 'information', 'hint'];\nconst TYPE = {\n  'GraphQL: Validation': 'validation',\n  'GraphQL: Deprecation': 'deprecation',\n  'GraphQL: Syntax': 'syntax'\n};\n/**\n * Registers a \"lint\" helper for CodeMirror.\n *\n * Using CodeMirror's \"lint\" addon: https://codemirror.net/demo/lint.html\n * Given the text within an editor, this helper will take that text and return\n * a list of linter issues, derived from GraphQL's parse and validate steps.\n * Also, this uses `graphql-language-service-parser` to power the diagnostics\n * service.\n *\n * Options:\n *\n *   - schema: GraphQLSchema provides the linter with positionally relevant info\n *\n */\n\n_codemirror.default.registerHelper('lint', 'graphql', (text, options) => {\n  const schema = options.schema;\n  const rawResults = (0, _graphqlLanguageServiceInterface.getDiagnostics)(text, schema);\n  const results = rawResults.map(error => ({\n    message: error.message,\n    severity: SEVERITY[error.severity - 1],\n    type: TYPE[error.source],\n    from: _codemirror.default.Pos(error.range.start.line, error.range.start.character),\n    to: _codemirror.default.Pos(error.range.end.line, error.range.end.character)\n  }));\n  return results;\n});"]},"metadata":{},"sourceType":"script"}