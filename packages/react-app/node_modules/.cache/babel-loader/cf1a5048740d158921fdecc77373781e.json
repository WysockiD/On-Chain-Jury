{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport usePoller from \"./Poller\";\nimport useOnBlock from \"./OnBlock\";\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nlet DEBUG = false;\nexport default function useBalance(provider, address, pollTime = 0) {\n  const [balance, setBalance] = useState();\n  const pollBalance = useCallback(async (provider, address) => {\n    if (provider && address) {\n      const newBalance = await provider.getBalance(address);\n\n      if (newBalance !== balance) {\n        setBalance(newBalance);\n      }\n    }\n  }, [provider, address]); // Only pass a provider to watch on a block if there is no pollTime\n\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  }); // Use a poller if a pollTime is provided\n\n  usePoller(async () => {\n    if (provider && address && pollTime > 0) {\n      if (DEBUG) console.log('polling!', address);\n      pollBalance();\n    }\n  }, pollTime, provider && address);\n  return balance;\n}","map":{"version":3,"sources":["/home/dylan/Desktop/JuryDapp/packages/react-app/src/hooks/Balance.js"],"names":["useState","useEffect","useCallback","usePoller","useOnBlock","DEBUG","useBalance","provider","address","pollTime","balance","setBalance","pollBalance","newBalance","getBalance","console","log"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,OAAOC,UAAP,MAAuB,WAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,KAAK,GAAG,KAAZ;AAEA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,OAA9B,EAAuCC,QAAQ,GAAG,CAAlD,EAAqD;AAEpE,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,EAAtC;AAEA,QAAMY,WAAW,GAAGV,WAAW,CAAC,OAAOK,QAAP,EAAiBC,OAAjB,KAA6B;AAC3D,QAAID,QAAQ,IAAIC,OAAhB,EAAyB;AACvB,YAAMK,UAAU,GAAG,MAAMN,QAAQ,CAACO,UAAT,CAAoBN,OAApB,CAAzB;;AACA,UAAIK,UAAU,KAAKH,OAAnB,EAA4B;AAC1BC,QAAAA,UAAU,CAACE,UAAD,CAAV;AACD;AACF;AACF,GAP8B,EAO5B,CAACN,QAAD,EAAWC,OAAX,CAP4B,CAA/B,CAJoE,CAapE;;AACAJ,EAAAA,UAAU,CAAEK,QAAQ,KAAK,CAAd,IAAkBF,QAAnB,EAA6B,MAAM;AAC3C,QAAIA,QAAQ,IAAIC,OAAZ,IAAuBC,QAAQ,KAAK,CAAxC,EAA2C;AACzCG,MAAAA,WAAW,CAACL,QAAD,EAAWC,OAAX,CAAX;AACH;AACA,GAJS,CAAV,CAdoE,CAoBpE;;AACAL,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAII,QAAQ,IAAIC,OAAZ,IAAuBC,QAAQ,GAAG,CAAtC,EAAyC;AACvC,UAAIJ,KAAJ,EAAWU,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBR,OAAxB;AACXI,MAAAA,WAAW;AACZ;AACF,GALQ,EAKNH,QALM,EAKIF,QAAQ,IAAIC,OALhB,CAAT;AAOA,SAAOE,OAAP;AACC","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport usePoller from \"./Poller\";\nimport useOnBlock from \"./OnBlock\";\n\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nlet DEBUG = false\n\nexport default function useBalance(provider, address, pollTime = 0) {\n\nconst [balance, setBalance] = useState();\n\nconst pollBalance = useCallback(async (provider, address) => {\n  if (provider && address) {\n    const newBalance = await provider.getBalance(address);\n    if (newBalance !== balance) {\n      setBalance(newBalance);\n    }\n  }\n}, [provider, address]);\n\n// Only pass a provider to watch on a block if there is no pollTime\nuseOnBlock((pollTime === 0)&&provider, () => {\n  if (provider && address && pollTime === 0) {\n    pollBalance(provider, address);\n}\n})\n\n// Use a poller if a pollTime is provided\nusePoller(async () => {\n  if (provider && address && pollTime > 0) {\n    if (DEBUG) console.log('polling!', address)\n    pollBalance()\n  }\n}, pollTime, provider && address)\n\nreturn balance;\n}\n"]},"metadata":{},"sourceType":"module"}