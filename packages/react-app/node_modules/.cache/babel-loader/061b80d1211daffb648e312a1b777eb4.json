{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst eccryptoJS = tslib_1.__importStar(require(\"eccrypto-js\"));\n\nconst utils_1 = require(\"@walletconnect/utils\");\n\nfunction generateKey(length) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    const _length = (length || 256) / 8;\n\n    const buffer = eccryptoJS.randomBytes(_length);\n    const result = utils_1.convertBufferToArrayBuffer(buffer);\n    return result;\n  });\n}\n\nexports.generateKey = generateKey;\n\nfunction verifyHmac(payload, key) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    const cipherText = utils_1.convertHexToBuffer(payload.data);\n    const iv = utils_1.convertHexToBuffer(payload.iv);\n    const hmac = utils_1.convertHexToBuffer(payload.hmac);\n    const hmacHex = utils_1.convertBufferToHex(hmac, true);\n    const unsigned = utils_1.concatBuffers(cipherText, iv);\n    const chmac = yield eccryptoJS.hmacSha256Sign(key, unsigned);\n    const chmacHex = utils_1.convertBufferToHex(chmac, true);\n\n    if (utils_1.removeHexPrefix(hmacHex) === utils_1.removeHexPrefix(chmacHex)) {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nexports.verifyHmac = verifyHmac;\n\nfunction encrypt(data, key, providedIv) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    const _key = utils_1.convertArrayBufferToBuffer(key);\n\n    const ivArrayBuffer = providedIv || (yield generateKey(128));\n    const iv = utils_1.convertArrayBufferToBuffer(ivArrayBuffer);\n    const ivHex = utils_1.convertBufferToHex(iv, true);\n    const contentString = JSON.stringify(data);\n    const content = utils_1.convertUtf8ToBuffer(contentString);\n    const cipherText = yield eccryptoJS.aesCbcEncrypt(iv, _key, content);\n    const cipherTextHex = utils_1.convertBufferToHex(cipherText, true);\n    const unsigned = utils_1.concatBuffers(cipherText, iv);\n    const hmac = yield eccryptoJS.hmacSha256Sign(_key, unsigned);\n    const hmacHex = utils_1.convertBufferToHex(hmac, true);\n    return {\n      data: cipherTextHex,\n      hmac: hmacHex,\n      iv: ivHex\n    };\n  });\n}\n\nexports.encrypt = encrypt;\n\nfunction decrypt(payload, key) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    const _key = utils_1.convertArrayBufferToBuffer(key);\n\n    if (!_key) {\n      throw new Error(\"Missing key: required for decryption\");\n    }\n\n    const verified = yield verifyHmac(payload, _key);\n\n    if (!verified) {\n      return null;\n    }\n\n    const cipherText = utils_1.convertHexToBuffer(payload.data);\n    const iv = utils_1.convertHexToBuffer(payload.iv);\n    const buffer = yield eccryptoJS.aesCbcDecrypt(iv, _key, cipherText);\n    const utf8 = utils_1.convertBufferToUtf8(buffer);\n    let data;\n\n    try {\n      data = JSON.parse(utf8);\n    } catch (error) {\n      return null;\n    }\n\n    return data;\n  });\n}\n\nexports.decrypt = decrypt;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst eccryptoJS = tslib_1.__importStar(require(\"eccrypto-js\"));\nconst utils_1 = require(\"@walletconnect/utils\");\nfunction generateKey(length) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const _length = (length || 256) / 8;\n        const buffer = eccryptoJS.randomBytes(_length);\n        const result = utils_1.convertBufferToArrayBuffer(buffer);\n        return result;\n    });\n}\nexports.generateKey = generateKey;\nfunction verifyHmac(payload, key) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const cipherText = utils_1.convertHexToBuffer(payload.data);\n        const iv = utils_1.convertHexToBuffer(payload.iv);\n        const hmac = utils_1.convertHexToBuffer(payload.hmac);\n        const hmacHex = utils_1.convertBufferToHex(hmac, true);\n        const unsigned = utils_1.concatBuffers(cipherText, iv);\n        const chmac = yield eccryptoJS.hmacSha256Sign(key, unsigned);\n        const chmacHex = utils_1.convertBufferToHex(chmac, true);\n        if (utils_1.removeHexPrefix(hmacHex) === utils_1.removeHexPrefix(chmacHex)) {\n            return true;\n        }\n        return false;\n    });\n}\nexports.verifyHmac = verifyHmac;\nfunction encrypt(data, key, providedIv) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const _key = utils_1.convertArrayBufferToBuffer(key);\n        const ivArrayBuffer = providedIv || (yield generateKey(128));\n        const iv = utils_1.convertArrayBufferToBuffer(ivArrayBuffer);\n        const ivHex = utils_1.convertBufferToHex(iv, true);\n        const contentString = JSON.stringify(data);\n        const content = utils_1.convertUtf8ToBuffer(contentString);\n        const cipherText = yield eccryptoJS.aesCbcEncrypt(iv, _key, content);\n        const cipherTextHex = utils_1.convertBufferToHex(cipherText, true);\n        const unsigned = utils_1.concatBuffers(cipherText, iv);\n        const hmac = yield eccryptoJS.hmacSha256Sign(_key, unsigned);\n        const hmacHex = utils_1.convertBufferToHex(hmac, true);\n        return {\n            data: cipherTextHex,\n            hmac: hmacHex,\n            iv: ivHex,\n        };\n    });\n}\nexports.encrypt = encrypt;\nfunction decrypt(payload, key) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const _key = utils_1.convertArrayBufferToBuffer(key);\n        if (!_key) {\n            throw new Error(\"Missing key: required for decryption\");\n        }\n        const verified = yield verifyHmac(payload, _key);\n        if (!verified) {\n            return null;\n        }\n        const cipherText = utils_1.convertHexToBuffer(payload.data);\n        const iv = utils_1.convertHexToBuffer(payload.iv);\n        const buffer = yield eccryptoJS.aesCbcDecrypt(iv, _key, cipherText);\n        const utf8 = utils_1.convertBufferToUtf8(buffer);\n        let data;\n        try {\n            data = JSON.parse(utf8);\n        }\n        catch (error) {\n            return null;\n        }\n        return data;\n    });\n}\nexports.decrypt = decrypt;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}