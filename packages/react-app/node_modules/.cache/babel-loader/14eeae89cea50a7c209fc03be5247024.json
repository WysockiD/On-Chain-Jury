{"ast":null,"code":"import { useState, useEffect } from \"react\";\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events \n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider \n*/\n\nexport default function useEventListener(readContracts, YourContract, register, localProvider, startBlock, args) {\n  const [updates, setUpdates] = useState([]);\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          let blockNumber = args[args.length - 1].blockNumber;\n          setUpdates(messages => [Object.assign({\n            blockNumber\n          }, args.pop().args), ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n  return updates;\n}","map":{"version":3,"sources":["/home/dylan/scaffold-eth/packages/react-app/src/hooks/EventListener.js"],"names":["useState","useEffect","useEventListener","readContracts","YourContract","register","localProvider","startBlock","args","updates","setUpdates","provider","resetEventsBlock","contracts","contractName","on","eventName","blockNumber","length","messages","Object","assign","pop","removeListener","e","console","log"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,gBAAT,CAA0BC,aAA1B,EAAyCC,YAAzC,EAAuDC,QAAvD,EAAiEC,aAAjE,EAAgFC,UAAhF,EAA4FC,IAA5F,EAAkG;AAC/G,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,OAAOU,QAAP,KAAoB,WAApB,IAAmC,OAAOJ,UAAP,KAAsB,WAA7D,EAA0E;AACxE;AACAI,MAAAA,QAAQ,CAACC,gBAAT,CAA0BL,UAA1B;AACD;;AACD,QAAIM,SAAS,IAAIC,YAAb,IAA6BD,SAAS,CAACC,YAAD,CAA1C,EAA0D;AACxD,UAAI;AACFD,QAAAA,SAAS,CAACC,YAAD,CAAT,CAAwBC,EAAxB,CAA2BC,SAA3B,EAAsC,CAAC,GAAGR,IAAJ,KAAa;AACjD,cAAIS,WAAW,GAAGT,IAAI,CAACA,IAAI,CAACU,MAAL,GAAY,CAAb,CAAJ,CAAoBD,WAAtC;AACAP,UAAAA,UAAU,CAACS,QAAQ,IAAI,CAACC,MAAM,CAACC,MAAP,CAAc;AAACJ,YAAAA;AAAD,WAAd,EAA4BT,IAAI,CAACc,GAAL,GAAWd,IAAvC,CAAD,EAA+C,GAAGW,QAAlD,CAAb,CAAV;AACD,SAHD;AAIA,eAAO,MAAM;AACXN,UAAAA,SAAS,CAACC,YAAD,CAAT,CAAwBS,cAAxB,CAAuCP,SAAvC;AACD,SAFD;AAGD,OARD,CAQE,OAAOQ,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;AACF,GAlBQ,EAkBN,CAACb,QAAD,EAAWJ,UAAX,EAAuBM,SAAvB,EAAkCC,YAAlC,EAAgDE,SAAhD,CAlBM,CAAT;AAoBA,SAAOP,OAAP;AACD","sourcesContent":["import { useState, useEffect } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events \n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider \n*/\n\nexport default function useEventListener(readContracts, YourContract, register, localProvider, startBlock, args) {\n  const [updates, setUpdates] = useState([]);\n\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          let blockNumber = args[args.length-1].blockNumber\n          setUpdates(messages => [Object.assign({blockNumber},args.pop().args), ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n\n  return updates;\n}\n"]},"metadata":{},"sourceType":"module"}