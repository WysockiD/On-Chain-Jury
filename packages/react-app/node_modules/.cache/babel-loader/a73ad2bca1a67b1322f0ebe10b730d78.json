{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getTypeInfo;\n\nvar _graphql = require(\"graphql\");\n\nvar _introspection = require(\"graphql/type/introspection\");\n\nvar _forEachState = _interopRequireDefault(require(\"./forEachState\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n *  Copyright (c) 2020 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * Utility for collecting rich type information given any token's state\n * from the graphql-mode parser.\n */\n\n\nfunction getTypeInfo(schema, tokenState) {\n  const info = {\n    schema,\n    type: null,\n    parentType: null,\n    inputType: null,\n    directiveDef: null,\n    fieldDef: null,\n    argDef: null,\n    argDefs: null,\n    objectFieldDefs: null\n  };\n  (0, _forEachState.default)(tokenState, state => {\n    switch (state.kind) {\n      case 'Query':\n      case 'ShortQuery':\n        info.type = schema.getQueryType();\n        break;\n\n      case 'Mutation':\n        info.type = schema.getMutationType();\n        break;\n\n      case 'Subscription':\n        info.type = schema.getSubscriptionType();\n        break;\n\n      case 'InlineFragment':\n      case 'FragmentDefinition':\n        if (state.type) {\n          info.type = schema.getType(state.type);\n        }\n\n        break;\n\n      case 'Field':\n      case 'AliasedField':\n        info.fieldDef = info.type && state.name ? getFieldDef(schema, info.parentType, state.name) : null;\n        info.type = info.fieldDef && info.fieldDef.type;\n        break;\n\n      case 'SelectionSet':\n        info.parentType = (0, _graphql.getNamedType)(info.type);\n        break;\n\n      case 'Directive':\n        info.directiveDef = state.name && schema.getDirective(state.name);\n        break;\n\n      case 'Arguments':\n        const parentDef = state.prevState.kind === 'Field' ? info.fieldDef : state.prevState.kind === 'Directive' ? info.directiveDef : state.prevState.kind === 'AliasedField' ? state.prevState.name && getFieldDef(schema, info.parentType, state.prevState.name) : null;\n        info.argDefs = parentDef && parentDef.args;\n        break;\n\n      case 'Argument':\n        info.argDef = null;\n\n        if (info.argDefs) {\n          for (let i = 0; i < info.argDefs.length; i++) {\n            if (info.argDefs[i].name === state.name) {\n              info.argDef = info.argDefs[i];\n              break;\n            }\n          }\n        }\n\n        info.inputType = info.argDef && info.argDef.type;\n        break;\n\n      case 'EnumValue':\n        const enumType = (0, _graphql.getNamedType)(info.inputType);\n        info.enumValue = enumType instanceof _graphql.GraphQLEnumType ? find(enumType.getValues(), val => val.value === state.name) : null;\n        break;\n\n      case 'ListValue':\n        const nullableType = (0, _graphql.getNullableType)(info.inputType);\n        info.inputType = nullableType instanceof _graphql.GraphQLList ? nullableType.ofType : null;\n        break;\n\n      case 'ObjectValue':\n        const objectType = (0, _graphql.getNamedType)(info.inputType);\n        info.objectFieldDefs = objectType instanceof _graphql.GraphQLInputObjectType ? objectType.getFields() : null;\n        break;\n\n      case 'ObjectField':\n        const objectField = state.name && info.objectFieldDefs ? info.objectFieldDefs[state.name] : null;\n        info.inputType = objectField && objectField.type;\n        break;\n\n      case 'NamedType':\n        info.type = schema.getType(state.name);\n        break;\n    }\n  });\n  return info;\n} // Gets the field definition given a type and field name\n\n\nfunction getFieldDef(schema, type, fieldName) {\n  if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === type) {\n    return _introspection.SchemaMetaFieldDef;\n  }\n\n  if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === type) {\n    return _introspection.TypeMetaFieldDef;\n  }\n\n  if (fieldName === _introspection.TypeNameMetaFieldDef.name && (0, _graphql.isCompositeType)(type)) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n\n  if (type.getFields) {\n    return type.getFields()[fieldName];\n  }\n} // Returns the first item in the array which causes predicate to return truthy.\n\n\nfunction find(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i])) {\n      return array[i];\n    }\n  }\n}","map":{"version":3,"sources":["/home/dylan/Desktop/JuryDapp/node_modules/codemirror-graphql/utils/getTypeInfo.js"],"names":["Object","defineProperty","exports","value","default","getTypeInfo","_graphql","require","_introspection","_forEachState","_interopRequireDefault","obj","__esModule","schema","tokenState","info","type","parentType","inputType","directiveDef","fieldDef","argDef","argDefs","objectFieldDefs","state","kind","getQueryType","getMutationType","getSubscriptionType","getType","name","getFieldDef","getNamedType","getDirective","parentDef","prevState","args","i","length","enumType","enumValue","GraphQLEnumType","find","getValues","val","nullableType","getNullableType","GraphQLList","ofType","objectType","GraphQLInputObjectType","getFields","objectField","fieldName","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","isCompositeType","array","predicate"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getTypeInfo;\n\nvar _graphql = require(\"graphql\");\n\nvar _introspection = require(\"graphql/type/introspection\");\n\nvar _forEachState = _interopRequireDefault(require(\"./forEachState\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *  Copyright (c) 2020 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * Utility for collecting rich type information given any token's state\n * from the graphql-mode parser.\n */\nfunction getTypeInfo(schema, tokenState) {\n  const info = {\n    schema,\n    type: null,\n    parentType: null,\n    inputType: null,\n    directiveDef: null,\n    fieldDef: null,\n    argDef: null,\n    argDefs: null,\n    objectFieldDefs: null\n  };\n  (0, _forEachState.default)(tokenState, state => {\n    switch (state.kind) {\n      case 'Query':\n      case 'ShortQuery':\n        info.type = schema.getQueryType();\n        break;\n\n      case 'Mutation':\n        info.type = schema.getMutationType();\n        break;\n\n      case 'Subscription':\n        info.type = schema.getSubscriptionType();\n        break;\n\n      case 'InlineFragment':\n      case 'FragmentDefinition':\n        if (state.type) {\n          info.type = schema.getType(state.type);\n        }\n\n        break;\n\n      case 'Field':\n      case 'AliasedField':\n        info.fieldDef = info.type && state.name ? getFieldDef(schema, info.parentType, state.name) : null;\n        info.type = info.fieldDef && info.fieldDef.type;\n        break;\n\n      case 'SelectionSet':\n        info.parentType = (0, _graphql.getNamedType)(info.type);\n        break;\n\n      case 'Directive':\n        info.directiveDef = state.name && schema.getDirective(state.name);\n        break;\n\n      case 'Arguments':\n        const parentDef = state.prevState.kind === 'Field' ? info.fieldDef : state.prevState.kind === 'Directive' ? info.directiveDef : state.prevState.kind === 'AliasedField' ? state.prevState.name && getFieldDef(schema, info.parentType, state.prevState.name) : null;\n        info.argDefs = parentDef && parentDef.args;\n        break;\n\n      case 'Argument':\n        info.argDef = null;\n\n        if (info.argDefs) {\n          for (let i = 0; i < info.argDefs.length; i++) {\n            if (info.argDefs[i].name === state.name) {\n              info.argDef = info.argDefs[i];\n              break;\n            }\n          }\n        }\n\n        info.inputType = info.argDef && info.argDef.type;\n        break;\n\n      case 'EnumValue':\n        const enumType = (0, _graphql.getNamedType)(info.inputType);\n        info.enumValue = enumType instanceof _graphql.GraphQLEnumType ? find(enumType.getValues(), val => val.value === state.name) : null;\n        break;\n\n      case 'ListValue':\n        const nullableType = (0, _graphql.getNullableType)(info.inputType);\n        info.inputType = nullableType instanceof _graphql.GraphQLList ? nullableType.ofType : null;\n        break;\n\n      case 'ObjectValue':\n        const objectType = (0, _graphql.getNamedType)(info.inputType);\n        info.objectFieldDefs = objectType instanceof _graphql.GraphQLInputObjectType ? objectType.getFields() : null;\n        break;\n\n      case 'ObjectField':\n        const objectField = state.name && info.objectFieldDefs ? info.objectFieldDefs[state.name] : null;\n        info.inputType = objectField && objectField.type;\n        break;\n\n      case 'NamedType':\n        info.type = schema.getType(state.name);\n        break;\n    }\n  });\n  return info;\n} // Gets the field definition given a type and field name\n\n\nfunction getFieldDef(schema, type, fieldName) {\n  if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === type) {\n    return _introspection.SchemaMetaFieldDef;\n  }\n\n  if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === type) {\n    return _introspection.TypeMetaFieldDef;\n  }\n\n  if (fieldName === _introspection.TypeNameMetaFieldDef.name && (0, _graphql.isCompositeType)(type)) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n\n  if (type.getFields) {\n    return type.getFields()[fieldName];\n  }\n} // Returns the first item in the array which causes predicate to return truthy.\n\n\nfunction find(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i])) {\n      return array[i];\n    }\n  }\n}"]},"metadata":{},"sourceType":"script"}