{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { SYMBOL_ASYNC_ITERATOR } from \"../polyfills/symbols.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { locatedError } from \"../error/locatedError.mjs\";\nimport { assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, collectFields, execute, getFieldDef, resolveFieldValueOrError } from \"../execution/execute.mjs\";\nimport { getOperationRootType } from \"../utilities/getOperationRootType.mjs\";\nimport mapAsyncIterator from \"./mapAsyncIterator.mjs\";\nexport function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? subscribeImpl(argsOrSchema) : subscribeImpl({\n    schema: argsOrSchema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    subscribeFieldResolver: subscribeFieldResolver\n  });\n}\n/**\n * This function checks if the error is a GraphQLError. If it is, report it as\n * an ExecutionResult, containing only errors and no data. Otherwise treat the\n * error as a system-class error and re-throw it.\n */\n\nfunction reportGraphQLError(error) {\n  if (error instanceof GraphQLError) {\n    return {\n      errors: [error]\n    };\n  }\n\n  throw error;\n}\n\nfunction subscribeImpl(args) {\n  var schema = args.schema,\n      document = args.document,\n      rootValue = args.rootValue,\n      contextValue = args.contextValue,\n      variableValues = args.variableValues,\n      operationName = args.operationName,\n      fieldResolver = args.fieldResolver,\n      subscribeFieldResolver = args.subscribeFieldResolver;\n  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  var mapSourceToResponse = function mapSourceToResponse(payload) {\n    return execute({\n      schema: schema,\n      document: document,\n      rootValue: payload,\n      contextValue: contextValue,\n      variableValues: variableValues,\n      operationName: operationName,\n      fieldResolver: fieldResolver\n    });\n  }; // Resolve the Source Stream, then map every source value to a\n  // ExecutionResult value as described above.\n\n\n  return sourcePromise.then(function (resultOrStream) {\n    return (// Note: Flow can't refine isAsyncIterable, so explicit casts are used.\n      isAsyncIterable(resultOrStream) ? mapAsyncIterator(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream\n    );\n  });\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\n\nexport function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues);\n\n  try {\n    var _fieldDef$subscribe; // If a valid context cannot be created due to incorrect arguments,\n    // this will throw an error.\n\n\n    var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n    if (Array.isArray(exeContext)) {\n      return Promise.resolve({\n        errors: exeContext\n      });\n    }\n\n    var type = getOperationRootType(schema, exeContext.operation);\n    var fields = collectFields(exeContext, type, exeContext.operation.selectionSet, Object.create(null), Object.create(null));\n    var responseNames = Object.keys(fields);\n    var responseName = responseNames[0];\n    var fieldNodes = fields[responseName];\n    var fieldNode = fieldNodes[0];\n    var fieldName = fieldNode.name.value;\n    var fieldDef = getFieldDef(schema, type, fieldName);\n\n    if (!fieldDef) {\n      throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), fieldNodes);\n    } // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n\n    var resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.fieldResolver;\n    var path = addPath(undefined, responseName, type.name);\n    var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, type, path); // resolveFieldValueOrError implements the \"ResolveFieldEventStream\"\n    // algorithm from GraphQL specification. It differs from\n    // \"ResolveFieldValue\" due to providing a different `resolveFn`.\n\n    var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info); // Coerce to Promise for easier error handling and consistent return type.\n\n    return Promise.resolve(result).then(function (eventStream) {\n      // If eventStream is an Error, rethrow a located error.\n      if (eventStream instanceof Error) {\n        return {\n          errors: [locatedError(eventStream, fieldNodes, pathToArray(path))]\n        };\n      } // Assert field returned an event stream, otherwise yield an error.\n\n\n      if (isAsyncIterable(eventStream)) {\n        // Note: isAsyncIterable above ensures this will be correct.\n        return eventStream;\n      }\n\n      throw new Error('Subscription field must return Async Iterable. ' + \"Received: \".concat(inspect(eventStream), \".\"));\n    });\n  } catch (error) {\n    // As with reportGraphQLError above, if the error is a GraphQLError, report\n    // it as an ExecutionResult; otherwise treat it as a system-class error and\n    // re-throw it.\n    return error instanceof GraphQLError ? Promise.resolve({\n      errors: [error]\n    }) : Promise.reject(error);\n  }\n}\n/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * either implementing a `Symbol.asyncIterator` or `\"@@asyncIterator\"` method.\n */\n\nfunction isAsyncIterable(maybeAsyncIterable) {\n  if (maybeAsyncIterable == null || _typeof(maybeAsyncIterable) !== 'object') {\n    return false;\n  }\n\n  return typeof maybeAsyncIterable[SYMBOL_ASYNC_ITERATOR] === 'function';\n}","map":{"version":3,"sources":["/home/dylan/Desktop/JuryDapp/node_modules/graphql/subscription/subscribe.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","SYMBOL_ASYNC_ITERATOR","inspect","addPath","pathToArray","GraphQLError","locatedError","assertValidExecutionArguments","buildExecutionContext","buildResolveInfo","collectFields","execute","getFieldDef","resolveFieldValueOrError","getOperationRootType","mapAsyncIterator","subscribe","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","subscribeFieldResolver","arguments","length","subscribeImpl","schema","reportGraphQLError","error","errors","args","sourcePromise","createSourceEventStream","mapSourceToResponse","payload","then","resultOrStream","isAsyncIterable","_fieldDef$subscribe","exeContext","Array","isArray","Promise","resolve","type","operation","fields","selectionSet","Object","create","responseNames","keys","responseName","fieldNodes","fieldNode","fieldName","name","value","fieldDef","concat","resolveFn","path","undefined","info","result","eventStream","Error","reject","maybeAsyncIterable"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { SYMBOL_ASYNC_ITERATOR } from \"../polyfills/symbols.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { locatedError } from \"../error/locatedError.mjs\";\nimport { assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, collectFields, execute, getFieldDef, resolveFieldValueOrError } from \"../execution/execute.mjs\";\nimport { getOperationRootType } from \"../utilities/getOperationRootType.mjs\";\nimport mapAsyncIterator from \"./mapAsyncIterator.mjs\";\nexport function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? subscribeImpl(argsOrSchema) : subscribeImpl({\n    schema: argsOrSchema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    subscribeFieldResolver: subscribeFieldResolver\n  });\n}\n/**\n * This function checks if the error is a GraphQLError. If it is, report it as\n * an ExecutionResult, containing only errors and no data. Otherwise treat the\n * error as a system-class error and re-throw it.\n */\n\nfunction reportGraphQLError(error) {\n  if (error instanceof GraphQLError) {\n    return {\n      errors: [error]\n    };\n  }\n\n  throw error;\n}\n\nfunction subscribeImpl(args) {\n  var schema = args.schema,\n      document = args.document,\n      rootValue = args.rootValue,\n      contextValue = args.contextValue,\n      variableValues = args.variableValues,\n      operationName = args.operationName,\n      fieldResolver = args.fieldResolver,\n      subscribeFieldResolver = args.subscribeFieldResolver;\n  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  var mapSourceToResponse = function mapSourceToResponse(payload) {\n    return execute({\n      schema: schema,\n      document: document,\n      rootValue: payload,\n      contextValue: contextValue,\n      variableValues: variableValues,\n      operationName: operationName,\n      fieldResolver: fieldResolver\n    });\n  }; // Resolve the Source Stream, then map every source value to a\n  // ExecutionResult value as described above.\n\n\n  return sourcePromise.then(function (resultOrStream) {\n    return (// Note: Flow can't refine isAsyncIterable, so explicit casts are used.\n      isAsyncIterable(resultOrStream) ? mapAsyncIterator(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream\n    );\n  });\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\n\nexport function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues);\n\n  try {\n    var _fieldDef$subscribe;\n\n    // If a valid context cannot be created due to incorrect arguments,\n    // this will throw an error.\n    var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n    if (Array.isArray(exeContext)) {\n      return Promise.resolve({\n        errors: exeContext\n      });\n    }\n\n    var type = getOperationRootType(schema, exeContext.operation);\n    var fields = collectFields(exeContext, type, exeContext.operation.selectionSet, Object.create(null), Object.create(null));\n    var responseNames = Object.keys(fields);\n    var responseName = responseNames[0];\n    var fieldNodes = fields[responseName];\n    var fieldNode = fieldNodes[0];\n    var fieldName = fieldNode.name.value;\n    var fieldDef = getFieldDef(schema, type, fieldName);\n\n    if (!fieldDef) {\n      throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), fieldNodes);\n    } // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n\n    var resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.fieldResolver;\n    var path = addPath(undefined, responseName, type.name);\n    var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, type, path); // resolveFieldValueOrError implements the \"ResolveFieldEventStream\"\n    // algorithm from GraphQL specification. It differs from\n    // \"ResolveFieldValue\" due to providing a different `resolveFn`.\n\n    var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info); // Coerce to Promise for easier error handling and consistent return type.\n\n    return Promise.resolve(result).then(function (eventStream) {\n      // If eventStream is an Error, rethrow a located error.\n      if (eventStream instanceof Error) {\n        return {\n          errors: [locatedError(eventStream, fieldNodes, pathToArray(path))]\n        };\n      } // Assert field returned an event stream, otherwise yield an error.\n\n\n      if (isAsyncIterable(eventStream)) {\n        // Note: isAsyncIterable above ensures this will be correct.\n        return eventStream;\n      }\n\n      throw new Error('Subscription field must return Async Iterable. ' + \"Received: \".concat(inspect(eventStream), \".\"));\n    });\n  } catch (error) {\n    // As with reportGraphQLError above, if the error is a GraphQLError, report\n    // it as an ExecutionResult; otherwise treat it as a system-class error and\n    // re-throw it.\n    return error instanceof GraphQLError ? Promise.resolve({\n      errors: [error]\n    }) : Promise.reject(error);\n  }\n}\n/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * either implementing a `Symbol.asyncIterator` or `\"@@asyncIterator\"` method.\n */\n\nfunction isAsyncIterable(maybeAsyncIterable) {\n  if (maybeAsyncIterable == null || _typeof(maybeAsyncIterable) !== 'object') {\n    return false;\n  }\n\n  return typeof maybeAsyncIterable[SYMBOL_ASYNC_ITERATOR] === 'function';\n}\n"]},"metadata":{},"sourceType":"module"}