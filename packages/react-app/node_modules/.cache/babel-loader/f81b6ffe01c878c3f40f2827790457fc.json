{"ast":null,"code":"import arrayFrom from \"../polyfills/arrayFrom.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport memoize3 from \"../jsutils/memoize3.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport isPromise from \"../jsutils/isPromise.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport isCollection from \"../jsutils/isCollection.mjs\";\nimport promiseReduce from \"../jsutils/promiseReduce.mjs\";\nimport promiseForObject from \"../jsutils/promiseForObject.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { locatedError } from \"../error/locatedError.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { assertValidSchema } from \"../type/validate.mjs\";\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from \"../type/introspection.mjs\";\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from \"../type/directives.mjs\";\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from \"../type/definition.mjs\";\nimport { typeFromAST } from \"../utilities/typeFromAST.mjs\";\nimport { getOperationRootType } from \"../utilities/getOperationRootType.mjs\";\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from \"./values.mjs\";\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({\n    schema: argsOrSchema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  });\n}\n/**\n * Also implements the \"Evaluating requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  var result = executeImpl(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction executeImpl(args) {\n  var schema = args.schema,\n      document = args.document,\n      rootValue = args.rootValue,\n      contextValue = args.contextValue,\n      variableValues = args.variableValues,\n      operationName = args.operationName,\n      fieldResolver = args.fieldResolver,\n      typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  document || devAssert(0, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null || isObjectLike(rawVariableValues) || devAssert(0, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {\n  var _definition$name, _operation$variableDe;\n\n  var operation;\n  var fragments = Object.create(null);\n\n  for (var _i2 = 0, _document$definitions2 = document.definitions; _i2 < _document$definitions2.length; _i2++) {\n    var definition = _document$definitions2[_i2];\n\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [new GraphQLError('Must provide operation name if query contains multiple operations.')];\n          }\n\n          operation = definition;\n        } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\"))];\n    }\n\n    return [new GraphQLError('Must provide an operation.')];\n  } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n  var variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];\n  var coercedVariableValues = getVariableValues(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {\n    maxErrors: 50\n  });\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,\n    typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,\n    errors: []\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName, parentType.name);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n\n  for (var _i4 = 0, _Object$keys2 = Object.keys(fields); _i4 < _Object$keys2.length; _i4++) {\n    var responseName = _Object$keys2[_i4];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName, parentType.name);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (!containsPromise && isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n *\n * @internal\n */\n\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++) {\n    var selection = _selectionSet$selecti2[_i6];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          if (!shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n\n          var name = getFieldEntryKey(selection);\n\n          if (!fields[name]) {\n            fields[name] = [];\n          }\n\n          fields[name].push(selection);\n          break;\n        }\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n            continue;\n          }\n\n          collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        {\n          var fragName = selection.name.value;\n\n          if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n\n          visitedFragmentNames[fragName] = true;\n          var fragment = exeContext.fragments[fragName];\n\n          if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n            continue;\n          }\n\n          collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precedence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if ((include === null || include === void 0 ? void 0 : include.if) === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n/**\n * @internal\n */\n\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n}\n/**\n * Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n * function. Returns the result of resolveFn or the abrupt-return Error object.\n *\n * @internal\n */\n\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    return isPromise(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n} // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\n\nfunction asErrorInstance(error) {\n  if (error instanceof Error) {\n    return error;\n  }\n\n  return new Error('Unexpected error value: ' + inspect(error));\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed;\n\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n  }\n}\n\nfunction handleFieldError(rawError, fieldNodes, path, returnType, exeContext) {\n  var error = locatedError(asErrorInstance(rawError), fieldNodes, pathToArray(path)); // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n  // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // istanbul ignore next (Not reachable. All possible output types have been considered)\n\n\n  false || invariant(0, 'Cannot complete value of unexpected output type: ' + inspect(returnType));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  if (!isCollection(result)) {\n    throw new GraphQLError(\"Expected Iterable, but did not find one for field \\\"\".concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\".\"));\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = arrayFrom(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index, undefined);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && isPromise(completedItem)) {\n      containsPromise = true;\n    }\n\n    return completedItem;\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  var serializedResult = returnType.serialize(result);\n\n  if (serializedResult === undefined) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var _returnType$resolveTy;\n\n  var resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;\n  var contextValue = exeContext.contextValue;\n  var runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" must resolve to an Object type at runtime for field \\\"\").concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeType), \"\\\". \") + \"Either the \\\"\".concat(returnType.name, \"\\\" type should provide a \\\"resolveType\\\" function or each possible type should provide an \\\"isTypeOf\\\" function.\"), fieldNodes);\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type for \\\"\").concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\n\nvar collectSubfields = memoize3(_collectSubfields);\n\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {\n    var node = fieldNodes[_i8];\n\n    if (node.selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nexport var defaultTypeResolver = function defaultTypeResolver(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i9 = 0; _i9 < isTypeOfResults.length; _i9++) {\n        if (isTypeOfResults[_i9]) {\n          return possibleTypes[_i9];\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}","map":{"version":3,"sources":["/home/dylan/Desktop/JuryDapp/node_modules/graphql/execution/execute.mjs"],"names":["arrayFrom","inspect","memoize3","invariant","devAssert","isPromise","isObjectLike","isCollection","promiseReduce","promiseForObject","addPath","pathToArray","GraphQLError","locatedError","Kind","assertValidSchema","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","GraphQLIncludeDirective","GraphQLSkipDirective","isObjectType","isAbstractType","isLeafType","isListType","isNonNullType","typeFromAST","getOperationRootType","getVariableValues","getArgumentValues","getDirectiveValues","execute","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","typeResolver","arguments","length","executeImpl","schema","executeSync","args","result","Error","assertValidExecutionArguments","exeContext","buildExecutionContext","Array","isArray","errors","data","executeOperation","operation","buildResponse","then","resolved","rawVariableValues","_definition$name","_operation$variableDe","fragments","Object","create","_i2","_document$definitions2","definitions","definition","kind","OPERATION_DEFINITION","undefined","name","value","FRAGMENT_DEFINITION","concat","variableDefinitions","coercedVariableValues","maxErrors","coerced","defaultFieldResolver","defaultTypeResolver","type","fields","collectFields","selectionSet","path","executeFieldsSerially","executeFields","error","push","Promise","resolve","parentType","sourceValue","keys","results","responseName","fieldNodes","fieldPath","resolveField","resolvedResult","containsPromise","_i4","_Object$keys2","runtimeType","visitedFragmentNames","_i6","_selectionSet$selecti2","selections","selection","FIELD","shouldIncludeNode","getFieldEntryKey","INLINE_FRAGMENT","doesFragmentConditionMatch","FRAGMENT_SPREAD","fragName","fragment","node","skip","if","include","typeConditionNode","typeCondition","conditionalType","isSubType","alias","source","_fieldDef$resolve","fieldNode","fieldName","fieldDef","getFieldDef","resolveFn","info","buildResolveInfo","resolveFieldValueOrError","completeValueCatchingError","returnType","_contextValue","asErrorInstance","completed","completeValue","handleFieldError","rawError","ofType","completeListValue","completeLeafValue","completeAbstractValue","completeObjectValue","itemType","completedResults","item","index","completedItem","all","serializedResult","serialize","_returnType$resolveTy","resolveTypeFn","resolveType","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeOrName","getType","isTypeOf","resolvedIsTypeOf","invalidReturnTypeError","collectAndExecuteSubfields","subFieldNodes","collectSubfields","_collectSubfields","_i8","abstractType","__typename","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","i","isTypeOfResult","isTypeOfResults","_i9","property","getQueryType","getFields"],"mappings":"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","sourcesContent":["import arrayFrom from \"../polyfills/arrayFrom.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport memoize3 from \"../jsutils/memoize3.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport isPromise from \"../jsutils/isPromise.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport isCollection from \"../jsutils/isCollection.mjs\";\nimport promiseReduce from \"../jsutils/promiseReduce.mjs\";\nimport promiseForObject from \"../jsutils/promiseForObject.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { locatedError } from \"../error/locatedError.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { assertValidSchema } from \"../type/validate.mjs\";\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from \"../type/introspection.mjs\";\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from \"../type/directives.mjs\";\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from \"../type/definition.mjs\";\nimport { typeFromAST } from \"../utilities/typeFromAST.mjs\";\nimport { getOperationRootType } from \"../utilities/getOperationRootType.mjs\";\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from \"./values.mjs\";\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({\n    schema: argsOrSchema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  });\n}\n/**\n * Also implements the \"Evaluating requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  var result = executeImpl(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction executeImpl(args) {\n  var schema = args.schema,\n      document = args.document,\n      rootValue = args.rootValue,\n      contextValue = args.contextValue,\n      variableValues = args.variableValues,\n      operationName = args.operationName,\n      fieldResolver = args.fieldResolver,\n      typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  document || devAssert(0, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null || isObjectLike(rawVariableValues) || devAssert(0, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {\n  var _definition$name, _operation$variableDe;\n\n  var operation;\n  var fragments = Object.create(null);\n\n  for (var _i2 = 0, _document$definitions2 = document.definitions; _i2 < _document$definitions2.length; _i2++) {\n    var definition = _document$definitions2[_i2];\n\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [new GraphQLError('Must provide operation name if query contains multiple operations.')];\n          }\n\n          operation = definition;\n        } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\"))];\n    }\n\n    return [new GraphQLError('Must provide an operation.')];\n  } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n  var variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];\n  var coercedVariableValues = getVariableValues(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {\n    maxErrors: 50\n  });\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,\n    typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,\n    errors: []\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName, parentType.name);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n\n  for (var _i4 = 0, _Object$keys2 = Object.keys(fields); _i4 < _Object$keys2.length; _i4++) {\n    var responseName = _Object$keys2[_i4];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName, parentType.name);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (!containsPromise && isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n *\n * @internal\n */\n\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var _i6 = 0, _selectionSet$selecti2 = selectionSet.selections; _i6 < _selectionSet$selecti2.length; _i6++) {\n    var selection = _selectionSet$selecti2[_i6];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          if (!shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n\n          var name = getFieldEntryKey(selection);\n\n          if (!fields[name]) {\n            fields[name] = [];\n          }\n\n          fields[name].push(selection);\n          break;\n        }\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n            continue;\n          }\n\n          collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        {\n          var fragName = selection.name.value;\n\n          if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n\n          visitedFragmentNames[fragName] = true;\n          var fragment = exeContext.fragments[fragName];\n\n          if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n            continue;\n          }\n\n          collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precedence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if ((include === null || include === void 0 ? void 0 : include.if) === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n/**\n * @internal\n */\n\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n}\n/**\n * Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n * function. Returns the result of resolveFn or the abrupt-return Error object.\n *\n * @internal\n */\n\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    return isPromise(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n} // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\n\nfunction asErrorInstance(error) {\n  if (error instanceof Error) {\n    return error;\n  }\n\n  return new Error('Unexpected error value: ' + inspect(error));\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed;\n\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n  }\n}\n\nfunction handleFieldError(rawError, fieldNodes, path, returnType, exeContext) {\n  var error = locatedError(asErrorInstance(rawError), fieldNodes, pathToArray(path)); // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n  // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // istanbul ignore next (Not reachable. All possible output types have been considered)\n\n\n  false || invariant(0, 'Cannot complete value of unexpected output type: ' + inspect(returnType));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  if (!isCollection(result)) {\n    throw new GraphQLError(\"Expected Iterable, but did not find one for field \\\"\".concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\".\"));\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = arrayFrom(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index, undefined);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && isPromise(completedItem)) {\n      containsPromise = true;\n    }\n\n    return completedItem;\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  var serializedResult = returnType.serialize(result);\n\n  if (serializedResult === undefined) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var _returnType$resolveTy;\n\n  var resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;\n  var contextValue = exeContext.contextValue;\n  var runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \\\"\".concat(returnType.name, \"\\\" must resolve to an Object type at runtime for field \\\"\").concat(info.parentType.name, \".\").concat(info.fieldName, \"\\\" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeType), \"\\\". \") + \"Either the \\\"\".concat(returnType.name, \"\\\" type should provide a \\\"resolveType\\\" function or each possible type should provide an \\\"isTypeOf\\\" function.\"), fieldNodes);\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type for \\\"\").concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\n\nvar collectSubfields = memoize3(_collectSubfields);\n\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var _i8 = 0; _i8 < fieldNodes.length; _i8++) {\n    var node = fieldNodes[_i8];\n\n    if (node.selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nexport var defaultTypeResolver = function defaultTypeResolver(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i9 = 0; _i9 < isTypeOfResults.length; _i9++) {\n        if (isTypeOfResults[_i9]) {\n          return possibleTypes[_i9];\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n"]},"metadata":{},"sourceType":"module"}