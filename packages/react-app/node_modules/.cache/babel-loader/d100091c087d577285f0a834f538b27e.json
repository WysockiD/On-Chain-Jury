{"ast":null,"code":"\"use strict\";\n\nvar _codemirror = _interopRequireDefault(require(\"codemirror\"));\n\nvar _graphqlLanguageServiceParser = require(\"graphql-language-service-parser\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n *  Copyright (c) 2020 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * This mode defines JSON, but provides a data-laden parser state to enable\n * better code intelligence.\n */\n\n\n_codemirror.default.defineMode('graphql-results', config => {\n  const parser = (0, _graphqlLanguageServiceParser.onlineParser)({\n    eatWhitespace: stream => stream.eatSpace(),\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: {\n      tabSize: config.tabSize\n    }\n  });\n  return {\n    config,\n    startState: parser.startState,\n    token: parser.token,\n    indent,\n    electricInput: /^\\s*[}\\]]/,\n    fold: 'brace',\n    closeBrackets: {\n      pairs: '[]{}\"\"',\n      explode: '[]{}'\n    }\n  };\n});\n\nfunction indent(state, textAfter) {\n  const levels = state.levels; // If there is no stack of levels, use the current level.\n  // Otherwise, use the top level, pre-emptively dedenting for close braces.\n\n  const level = !levels || levels.length === 0 ? state.indentLevel : levels[levels.length - 1] - (this.electricInput.test(textAfter) ? 1 : 0);\n  return level * this.config.indentUnit;\n}\n/**\n * The lexer rules. These are exactly as described by the spec.\n */\n\n\nconst LexRules = {\n  // All Punctuation used in JSON.\n  Punctuation: /^\\[|]|\\{|\\}|:|,/,\n  // JSON Number.\n  Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n  // JSON String.\n  String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n  // JSON literal keywords.\n  Keyword: /^true|false|null/\n};\n/**\n * The parser rules for JSON.\n */\n\nconst ParseRules = {\n  Document: [(0, _graphqlLanguageServiceParser.p)('{'), (0, _graphqlLanguageServiceParser.list)('Entry', (0, _graphqlLanguageServiceParser.p)(',')), (0, _graphqlLanguageServiceParser.p)('}')],\n  Entry: [(0, _graphqlLanguageServiceParser.t)('String', 'def'), (0, _graphqlLanguageServiceParser.p)(':'), 'Value'],\n\n  Value(token) {\n    switch (token.kind) {\n      case 'Number':\n        return 'NumberValue';\n\n      case 'String':\n        return 'StringValue';\n\n      case 'Punctuation':\n        switch (token.value) {\n          case '[':\n            return 'ListValue';\n\n          case '{':\n            return 'ObjectValue';\n        }\n\n        return null;\n\n      case 'Keyword':\n        switch (token.value) {\n          case 'true':\n          case 'false':\n            return 'BooleanValue';\n\n          case 'null':\n            return 'NullValue';\n        }\n\n        return null;\n    }\n  },\n\n  NumberValue: [(0, _graphqlLanguageServiceParser.t)('Number', 'number')],\n  StringValue: [(0, _graphqlLanguageServiceParser.t)('String', 'string')],\n  BooleanValue: [(0, _graphqlLanguageServiceParser.t)('Keyword', 'builtin')],\n  NullValue: [(0, _graphqlLanguageServiceParser.t)('Keyword', 'keyword')],\n  ListValue: [(0, _graphqlLanguageServiceParser.p)('['), (0, _graphqlLanguageServiceParser.list)('Value', (0, _graphqlLanguageServiceParser.p)(',')), (0, _graphqlLanguageServiceParser.p)(']')],\n  ObjectValue: [(0, _graphqlLanguageServiceParser.p)('{'), (0, _graphqlLanguageServiceParser.list)('ObjectField', (0, _graphqlLanguageServiceParser.p)(',')), (0, _graphqlLanguageServiceParser.p)('}')],\n  ObjectField: [(0, _graphqlLanguageServiceParser.t)('String', 'property'), (0, _graphqlLanguageServiceParser.p)(':'), 'Value']\n};","map":{"version":3,"sources":["/home/dylan/scaffold-eth/node_modules/codemirror-graphql/results/mode.js"],"names":["_codemirror","_interopRequireDefault","require","_graphqlLanguageServiceParser","obj","__esModule","default","defineMode","config","parser","onlineParser","eatWhitespace","stream","eatSpace","lexRules","LexRules","parseRules","ParseRules","editorConfig","tabSize","startState","token","indent","electricInput","fold","closeBrackets","pairs","explode","state","textAfter","levels","level","length","indentLevel","test","indentUnit","Punctuation","Number","String","Keyword","Document","p","list","Entry","t","Value","kind","value","NumberValue","StringValue","BooleanValue","NullValue","ListValue","ObjectValue","ObjectField"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _codemirror = _interopRequireDefault(require(\"codemirror\"));\n\nvar _graphqlLanguageServiceParser = require(\"graphql-language-service-parser\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *  Copyright (c) 2020 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * This mode defines JSON, but provides a data-laden parser state to enable\n * better code intelligence.\n */\n_codemirror.default.defineMode('graphql-results', config => {\n  const parser = (0, _graphqlLanguageServiceParser.onlineParser)({\n    eatWhitespace: stream => stream.eatSpace(),\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: {\n      tabSize: config.tabSize\n    }\n  });\n  return {\n    config,\n    startState: parser.startState,\n    token: parser.token,\n    indent,\n    electricInput: /^\\s*[}\\]]/,\n    fold: 'brace',\n    closeBrackets: {\n      pairs: '[]{}\"\"',\n      explode: '[]{}'\n    }\n  };\n});\n\nfunction indent(state, textAfter) {\n  const levels = state.levels; // If there is no stack of levels, use the current level.\n  // Otherwise, use the top level, pre-emptively dedenting for close braces.\n\n  const level = !levels || levels.length === 0 ? state.indentLevel : levels[levels.length - 1] - (this.electricInput.test(textAfter) ? 1 : 0);\n  return level * this.config.indentUnit;\n}\n/**\n * The lexer rules. These are exactly as described by the spec.\n */\n\n\nconst LexRules = {\n  // All Punctuation used in JSON.\n  Punctuation: /^\\[|]|\\{|\\}|:|,/,\n  // JSON Number.\n  Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n  // JSON String.\n  String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n  // JSON literal keywords.\n  Keyword: /^true|false|null/\n};\n/**\n * The parser rules for JSON.\n */\n\nconst ParseRules = {\n  Document: [(0, _graphqlLanguageServiceParser.p)('{'), (0, _graphqlLanguageServiceParser.list)('Entry', (0, _graphqlLanguageServiceParser.p)(',')), (0, _graphqlLanguageServiceParser.p)('}')],\n  Entry: [(0, _graphqlLanguageServiceParser.t)('String', 'def'), (0, _graphqlLanguageServiceParser.p)(':'), 'Value'],\n\n  Value(token) {\n    switch (token.kind) {\n      case 'Number':\n        return 'NumberValue';\n\n      case 'String':\n        return 'StringValue';\n\n      case 'Punctuation':\n        switch (token.value) {\n          case '[':\n            return 'ListValue';\n\n          case '{':\n            return 'ObjectValue';\n        }\n\n        return null;\n\n      case 'Keyword':\n        switch (token.value) {\n          case 'true':\n          case 'false':\n            return 'BooleanValue';\n\n          case 'null':\n            return 'NullValue';\n        }\n\n        return null;\n    }\n  },\n\n  NumberValue: [(0, _graphqlLanguageServiceParser.t)('Number', 'number')],\n  StringValue: [(0, _graphqlLanguageServiceParser.t)('String', 'string')],\n  BooleanValue: [(0, _graphqlLanguageServiceParser.t)('Keyword', 'builtin')],\n  NullValue: [(0, _graphqlLanguageServiceParser.t)('Keyword', 'keyword')],\n  ListValue: [(0, _graphqlLanguageServiceParser.p)('['), (0, _graphqlLanguageServiceParser.list)('Value', (0, _graphqlLanguageServiceParser.p)(',')), (0, _graphqlLanguageServiceParser.p)(']')],\n  ObjectValue: [(0, _graphqlLanguageServiceParser.p)('{'), (0, _graphqlLanguageServiceParser.list)('ObjectField', (0, _graphqlLanguageServiceParser.p)(',')), (0, _graphqlLanguageServiceParser.p)('}')],\n  ObjectField: [(0, _graphqlLanguageServiceParser.t)('String', 'property'), (0, _graphqlLanguageServiceParser.p)(':'), 'Value']\n};"]},"metadata":{},"sourceType":"script"}