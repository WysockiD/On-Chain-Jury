{"ast":null,"code":"import { GraphQLError } from \"./GraphQLError.mjs\";\n/**\n * Given an arbitrary Error, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(originalError, nodes, path) {\n  var _nodes; // Note: this uses a brand-check to support GraphQL errors originating from\n  // other contexts.\n\n\n  if (Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes, originalError.source, originalError.positions, path, originalError);\n}","map":{"version":3,"sources":["/home/dylan/Desktop/JuryDapp/node_modules/graphql/error/locatedError.mjs"],"names":["GraphQLError","locatedError","originalError","nodes","path","_nodes","Array","isArray","message","source","positions"],"mappings":"AAAA,SAASA,YAAT,QAA6B,oBAA7B;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,aAAtB,EAAqCC,KAArC,EAA4CC,IAA5C,EAAkD;AACvD,MAAIC,MAAJ,CADuD,CAGvD;AACA;;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcL,aAAa,CAACE,IAA5B,CAAJ,EAAuC;AACrC,WAAOF,aAAP;AACD;;AAED,SAAO,IAAIF,YAAJ,CAAiBE,aAAa,CAACM,OAA/B,EAAwC,CAACH,MAAM,GAAGH,aAAa,CAACC,KAAxB,MAAmC,IAAnC,IAA2CE,MAAM,KAAK,KAAK,CAA3D,GAA+DA,MAA/D,GAAwEF,KAAhH,EAAuHD,aAAa,CAACO,MAArI,EAA6IP,aAAa,CAACQ,SAA3J,EAAsKN,IAAtK,EAA4KF,aAA5K,CAAP;AACD","sourcesContent":["import { GraphQLError } from \"./GraphQLError.mjs\";\n/**\n * Given an arbitrary Error, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(originalError, nodes, path) {\n  var _nodes;\n\n  // Note: this uses a brand-check to support GraphQL errors originating from\n  // other contexts.\n  if (Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes, originalError.source, originalError.positions, path, originalError);\n}\n"]},"metadata":{},"sourceType":"module"}