{"ast":null,"code":"\"use strict\";\n\nimport net from \"net\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nexport class IpcProvider extends JsonRpcProvider {\n  constructor(path, network) {\n    logger.checkNew(new.target, IpcProvider);\n\n    if (path == null) {\n      logger.throwError(\"missing path\", Logger.errors.MISSING_ARGUMENT, {\n        arg: \"path\"\n      });\n    }\n\n    super(\"ipc://\" + path, network);\n    defineReadOnly(this, \"path\", path);\n  } // @TODO: Create a connection to the IPC path and use filters instead of polling for block\n\n\n  send(method, params) {\n    // This method is very simple right now. We create a new socket\n    // connection each time, which may be slower, but the main\n    // advantage we are aiming for now is security. This simplifies\n    // multiplexing requests (since we do not need to multiplex).\n    let payload = JSON.stringify({\n      method: method,\n      params: params,\n      id: 42,\n      jsonrpc: \"2.0\"\n    });\n    return new Promise((resolve, reject) => {\n      let response = Buffer.alloc(0);\n      let stream = net.connect(this.path);\n      stream.on(\"data\", data => {\n        response = Buffer.concat([response, data]);\n      });\n      stream.on(\"end\", () => {\n        try {\n          resolve(JSON.parse(response.toString()).result); // @TODO: Better pull apart the error\n\n          stream.destroy();\n        } catch (error) {\n          reject(error);\n          stream.destroy();\n        }\n      });\n      stream.on(\"error\", error => {\n        reject(error);\n        stream.destroy();\n      });\n      stream.write(payload);\n      stream.end();\n    });\n  }\n\n}","map":{"version":3,"sources":["../src.ts/ipc-provider.ts"],"names":[],"mappings":"AAAA;;AAEA,OAAO,GAAP,MAAgB,KAAhB;AAEA,SAAS,cAAT,QAA+B,2BAA/B;AAGA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEA,SAAS,eAAT,QAAgC,qBAAhC;AAGA,OAAM,MAAO,WAAP,SAA2B,eAA3B,CAA0C;AAG5C,EAAA,WAAA,CAAY,IAAZ,EAA0B,OAA1B,EAA8C;AAC1C,IAAA,MAAM,CAAC,QAAP,CAAgB,GAAG,CAAC,MAApB,EAA4B,WAA5B;;AAEA,QAAI,IAAI,IAAI,IAAZ,EAAkB;AACd,MAAA,MAAM,CAAC,UAAP,CAAkB,cAAlB,EAAkC,MAAM,CAAC,MAAP,CAAc,gBAAhD,EAAkE;AAAE,QAAA,GAAG,EAAE;AAAP,OAAlE;AACH;;AAED,UAAM,WAAW,IAAjB,EAAuB,OAAvB;AAEA,IAAA,cAAc,CAAC,IAAD,EAAO,MAAP,EAAe,IAAf,CAAd;AACH,GAb2C,CAe5C;;;AAEA,EAAA,IAAI,CAAC,MAAD,EAAiB,MAAjB,EAAmC;AACnC;AACA;AACA;AACA;AAEA,QAAI,OAAO,GAAG,IAAI,CAAC,SAAL,CAAe;AACzB,MAAA,MAAM,EAAE,MADiB;AAEzB,MAAA,MAAM,EAAE,MAFiB;AAGzB,MAAA,EAAE,EAAE,EAHqB;AAIzB,MAAA,OAAO,EAAE;AAJgB,KAAf,CAAd;AAOA,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACnC,UAAI,QAAQ,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,CAAf;AAEA,UAAI,MAAM,GAAG,GAAG,CAAC,OAAJ,CAAY,KAAK,IAAjB,CAAb;AAEA,MAAA,MAAM,CAAC,EAAP,CAAU,MAAV,EAAmB,IAAD,IAAS;AACvB,QAAA,QAAQ,GAAG,MAAM,CAAC,MAAP,CAAc,CAAE,QAAF,EAAY,IAAZ,CAAd,CAAX;AACH,OAFD;AAIA,MAAA,MAAM,CAAC,EAAP,CAAU,KAAV,EAAiB,MAAK;AAClB,YAAI;AACA,UAAA,OAAO,CAAC,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,QAAT,EAAX,EAAgC,MAAjC,CAAP,CADA,CAEA;;AACA,UAAA,MAAM,CAAC,OAAP;AACH,SAJD,CAIE,OAAO,KAAP,EAAc;AACZ,UAAA,MAAM,CAAC,KAAD,CAAN;AACA,UAAA,MAAM,CAAC,OAAP;AACH;AACJ,OATD;AAWA,MAAA,MAAM,CAAC,EAAP,CAAU,OAAV,EAAoB,KAAD,IAAU;AACzB,QAAA,MAAM,CAAC,KAAD,CAAN;AACA,QAAA,MAAM,CAAC,OAAP;AACH,OAHD;AAKA,MAAA,MAAM,CAAC,KAAP,CAAa,OAAb;AACA,MAAA,MAAM,CAAC,GAAP;AACH,KA3BM,CAAP;AA4BH;;AA1D2C","sourceRoot":"","sourcesContent":["\"use strict\";\nimport net from \"net\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nexport class IpcProvider extends JsonRpcProvider {\n    constructor(path, network) {\n        logger.checkNew(new.target, IpcProvider);\n        if (path == null) {\n            logger.throwError(\"missing path\", Logger.errors.MISSING_ARGUMENT, { arg: \"path\" });\n        }\n        super(\"ipc://\" + path, network);\n        defineReadOnly(this, \"path\", path);\n    }\n    // @TODO: Create a connection to the IPC path and use filters instead of polling for block\n    send(method, params) {\n        // This method is very simple right now. We create a new socket\n        // connection each time, which may be slower, but the main\n        // advantage we are aiming for now is security. This simplifies\n        // multiplexing requests (since we do not need to multiplex).\n        let payload = JSON.stringify({\n            method: method,\n            params: params,\n            id: 42,\n            jsonrpc: \"2.0\"\n        });\n        return new Promise((resolve, reject) => {\n            let response = Buffer.alloc(0);\n            let stream = net.connect(this.path);\n            stream.on(\"data\", (data) => {\n                response = Buffer.concat([response, data]);\n            });\n            stream.on(\"end\", () => {\n                try {\n                    resolve(JSON.parse(response.toString()).result);\n                    // @TODO: Better pull apart the error\n                    stream.destroy();\n                }\n                catch (error) {\n                    reject(error);\n                    stream.destroy();\n                }\n            });\n            stream.on(\"error\", (error) => {\n                reject(error);\n                stream.destroy();\n            });\n            stream.write(payload);\n            stream.end();\n        });\n    }\n}\n//# sourceMappingURL=ipc-provider.js.map"]},"metadata":{},"sourceType":"module"}