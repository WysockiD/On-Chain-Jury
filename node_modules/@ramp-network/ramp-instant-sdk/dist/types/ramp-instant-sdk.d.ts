import { IHostConfig, TAllEvents } from './types';
export { IWidgetCloseEvent as WidgetCloseEvent, IWidgetCloseRequestCancelledEvent as WidgetCloseRequestCancelledEvent, IWidgetCloseRequestConfirmedEvent as WidgetCloseRequestConfirmedEvent, IWidgetCloseRequestEvent as WidgetCloseRequestEvent, IWidgetConfigDoneEvent as WidgetConfigDoneEvent, IWidgetEvent as RampInstantEvent, TWidgetEvents as RampInstantEvents, WidgetEventTypes as RampInstantEventTypes, WidgetVariantTypes as RampInstantWidgetVariantTypes, IPurchase as RampInstantPurchase, } from './types';
export declare class RampInstantSDK {
    widgetWindow?: Window;
    domNodes?: {
        body: HTMLBodyElement | null;
        iframe: HTMLIFrameElement;
        overlay: HTMLDivElement;
        shadowHost: HTMLDivElement;
        shadow: ShadowRoot;
    };
    private _config;
    private _listeners;
    private _isVisible;
    private _isPollingForSwapStatus;
    private _purchasePollingCredentials;
    constructor(config: IHostConfig);
    show(): RampInstantSDK;
    on<T extends TAllEvents>(type: T['type'] | '*', callback: (event: T) => any): RampInstantSDK;
    unsubscribe(type: TAllEvents['type'] | '*', callback: (event: TAllEvents) => any): RampInstantSDK;
    _on<T extends TAllEvents>(type: T['type'] | '*', callback: (event: T) => any, internal: boolean): void;
    private _subscribeToWidgetEvents;
    private _registerSdkEventHandlers;
    private _dispatchEvent;
    private _handleEscapeClick;
    private _teardownEventSubscriptions;
    private _processPurchasePollingLoop;
    private _runPostSubscribeHooks;
    private _isConfiguredAsHosted;
}
