var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/* eslint-disable no-console */
import { useState, useEffect } from "react";
import usePoller from "./Poller";
import { BLOCK_TIME } from "./constants";
var DEBUG = false;
export default function useContractReader(contract, functionName, args, pollTime, formatter, onChange) {
    var _this = this;
    var adjustPollTime = BLOCK_TIME;
    if (pollTime) {
        adjustPollTime = pollTime;
    }
    else if (!pollTime && typeof args === "number") {
        // it's okay to pass poll time as last argument without args for the call
        adjustPollTime = args;
    }
    var _a = __read(useState(), 2), value = _a[0], setValue = _a[1];
    useEffect(function () {
        if (typeof onChange === "function") {
            setTimeout(function () { return onChange(value); }, 1);
        }
    }, [value, onChange]);
    usePoller(function () {
        var readContractValue = function () { return __awaiter(_this, void 0, void 0, function () {
            var newValue, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        newValue = void 0;
                        if (DEBUG)
                            console.log("CALLING ", functionName, "with args", args);
                        if (!(args && args.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, contract[functionName].apply(contract, __spread(args))];
                    case 1:
                        newValue = _a.sent();
                        if (DEBUG) {
                            console.log("functionName", functionName, "args", args, "RESULT:", newValue);
                        }
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, contract[functionName]()];
                    case 3:
                        newValue = _a.sent();
                        _a.label = 4;
                    case 4:
                        // perform any processing on the raw response
                        if (formatter && typeof formatter === "function") {
                            newValue = formatter(newValue);
                        }
                        if (newValue !== value) {
                            setValue(newValue);
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        console.log(e_1);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        }); };
        if (contract && typeof contract[functionName] !== "undefined")
            readContractValue();
    }, adjustPollTime);
    return value;
}
