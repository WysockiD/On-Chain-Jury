var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { useState, useEffect } from "react";
import { AddressZero } from "@ethersproject/constants";
var useResolveEnsName = function (provider, ensName) {
    var _a = __read(useState(AddressZero), 2), address = _a[0], setAddress = _a[1];
    useEffect(function () {
        if (provider) {
            provider.resolveName(ensName).then(function (resolvedAddress) { return setAddress(resolvedAddress); });
        }
    }, [provider, ensName]);
    return address;
};
export default useResolveEnsName;
