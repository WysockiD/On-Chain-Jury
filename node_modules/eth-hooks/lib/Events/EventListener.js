var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import { useState, useEffect, useCallback } from "react";
export default function useEventListener(contract, eventName, provider, startBlock) {
    var _a = __read(useState([]), 2), updates = _a[0], setUpdates = _a[1];
    var addNewEvent = useCallback(function () {
        var eventArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            eventArgs[_i] = arguments[_i];
        }
        return setUpdates(function (messages) { return __spread(messages, [eventArgs.pop().args]); });
    }, []);
    // eslint-disable-next-line consistent-return
    useEffect(function () {
        if (typeof provider !== "undefined" && typeof startBlock !== "undefined") {
            // if you want to read _all_ events from your contracts, set this to the block number it is deployed
            provider.resetEventsBlock(startBlock);
        }
        if (contract) {
            try {
                contract.on(eventName, addNewEvent);
                return function () {
                    contract.off(eventName, addNewEvent);
                };
            }
            catch (e) {
                // Event "eventName" may not exist on contract
                // eslint-disable-next-line no-console
                console.log(e);
            }
        }
    }, [provider, contract, eventName, startBlock, addNewEvent]);
    return updates;
}
