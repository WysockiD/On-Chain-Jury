var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { useState, useEffect } from "react";
import BurnerProvider from "burner-provider";
import { Web3Provider } from "@ethersproject/providers";
import { isAddress } from "@ethersproject/address";
import useUserAddress from "./UserAddress";
var useUserProvider = function (provider) {
    var _a = __read(useState(provider), 2), injectedProvider = _a[0], setInjectedProvider = _a[1];
    var userAddress = useUserAddress(provider);
    useEffect(function () {
        // If provider is read-only, generate a burner wallet.
        setInjectedProvider(isAddress(userAddress) ? provider : new Web3Provider(new BurnerProvider(provider.connection.url)));
    }, [userAddress, provider]);
    return injectedProvider;
};
export default useUserProvider;
